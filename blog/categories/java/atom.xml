<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | soulmachine]]></title>
  <link href="http://www.soulmachine.me/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://www.soulmachine.me/"/>
  <updated>2015-06-22T02:32:42-07:00</updated>
  <id>http://www.soulmachine.me/</id>
  <author>
    <name><![CDATA[soulmachine]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Deserialize a JSON String to a Binary Tree]]></title>
    <link href="http://www.soulmachine.me/blog/2015/06/22/deserialize-a-json-string-to-a-binary-tree/"/>
    <updated>2015-06-22T01:36:02-07:00</updated>
    <id>http://www.soulmachine.me/blog/2015/06/22/deserialize-a-json-string-to-a-binary-tree</id>
    <content type="html"><![CDATA[<h2>A simple solution</h2>

<p>We know that Jackson is very convenient to deserialize a JSON string into a <code>ArrayList</code>, <code>HashMap</code> or POJO object.</p>

<p>But how to deserialize a JSON String to a binary tree?</p>

<p>The definition of binary tree node is as follows:</p>

<p>```java
public class BinaryTreeNode<E>
{</p>

<pre><code>public E value;
public BinaryTreeNode&lt;E&gt; left;
public BinaryTreeNode&lt;E&gt; right;
</code></pre>

<p>```</p>

<p>The JSON String is as follows:</p>

<pre><code>{
   "value": 2,
   "left": {
    "value": 1,
    "left": null,
    "right": null
  },
  "right": {
    "value": 10,
    "left": {
      "value": 5,
      "left": null,
      "right": null
    },
    "right": null
  }
}
</code></pre>

<p>The above JSON string represents a binary tree as the following:</p>

<pre><code>  2
 / \
1   10
   /
  5
</code></pre>

<p>The solution is quite simpler, since JSON can express tree naturally, Jackson can deal with recursive tree directly. Just annotate a constructor with <code>JsonCreator</code>:</p>

<p>```java
public static class BinaryTreeNode<E>
{</p>

<pre><code>public E value;
public BinaryTreeNode left;
public BinaryTreeNode right;

@JsonCreator
public BinaryTreeNode(@JsonProperty("value") final E value) {
    this.value = value;
}
</code></pre>

<p>}
```</p>

<p>Let&rsquo;s write a unite test to try it:</p>

<!-- more -->


<p>```java
package me.soulmachine.customized_collection;</p>

<p>import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;</p>

<p>import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;</p>

<p>import static org.junit.Assert.assertEquals;</p>

<p>public class BinaryTreeNodeTest {</p>

<pre><code>public static class BinaryTreeNode&lt;E&gt; {
    public E value;
    public BinaryTreeNode left;
    public BinaryTreeNode right;

    @JsonCreator
    public BinaryTreeNode(@JsonProperty("value") final E value) {
        this.value = value;
    }

    ArrayList&lt;E&gt; preOrder() {
        final ArrayList&lt;E&gt; result = new ArrayList&lt;&gt;();
        if (this.value == null) {
            return result;
        }
        preOrder(this, result);
        return result;
    }

    private static &lt;E&gt; void preOrder(BinaryTreeNode&lt;E&gt; root, ArrayList&lt;E&gt; result) {
        if (root == null)
            return;

        result.add(root.value);
        if (root.left != null)
            preOrder(root.left, result);
        if (root.right != null)
            preOrder(root.right, result);
    }
}
@Test public void binaryTreeNodeTest() throws IOException {
    ObjectMapper objectMapper = new ObjectMapper();
    /*
         2
        / \
       1   10
          /
         5
    */
    final String jsonStr = "{\n"
        + "  \"value\": 2,\n"
        + "  \"left\": {\n"
        + "    \"value\": 1,\n"
        + "    \"left\": null,\n"
        + "    \"right\": null\n"
        + "  },\n" + "  \"right\": {\n"
        + "    \"value\": 10,\n"
        + "    \"left\": {\n"
        + "      \"value\": 5,\n"
        + "      \"left\": null,\n"
        + "      \"right\": null\n"
        + "    },\n"
        + "    \"right\": null\n"
        + "  }\n"
        + "}";
    System.out.println(jsonStr);
    final BinaryTreeNode&lt;Integer&gt; intTree = objectMapper.readValue(jsonStr,
        new TypeReference&lt;BinaryTreeNode&lt;Integer&gt;&gt;() {});
    final List&lt;Integer&gt; listExpected = Arrays.asList(2, 1, 10, 5);
    assertEquals(listExpected, intTree.preOrder());
}
</code></pre>

<p>}
```</p>

<h2>A compact serialization format</h2>

<p>Well, there is a little problem here, the JSON string above is very verbose. Let&rsquo;s use another kind of serialization format, i.e., serialize a binary tree in level order traversal. For example, the binary tree above can be serialized as the following JSON string:</p>

<pre><code>[2,1,10,null,null,5] 
</code></pre>

<p>Now how to deserialize this JSON string to a binary tree?</p>

<p>The idea is very similar to my previous article, <a href="http://www.soulmachine.me/blog/2015/06/21/deserialize-a-json-array-to-a-singly-linked-list/">Deserialize a JSON Array to a Singly Linked List</a>. Just make the <code>BinaryTreeNode</code> implement <code>java.util.list</code>,  pretend that it&rsquo;s a list, write our own deserialization code so that Jackson can treat a binary tree as a list.</p>

<p>The complete code of <code>BinaryTreeNode</code> is as the following:</p>

<p>```java
package me.soulmachine.customized_collection;</p>

<p>import java.util.*;</p>

<p>public class BinaryTreeNode<E> extends AbstractSequentialList<E></p>

<pre><code>implements Cloneable, java.io.Serializable {
public E value;
public BinaryTreeNode&lt;E&gt; left;
public BinaryTreeNode&lt;E&gt; right;

/** has a left child, but it's a null node. */
private transient boolean leftIsNull;
/** has a right child, but it's a null node. */
private transient boolean rightIsNull;

/**
 * Constructs an empty binary tree.
 */
public BinaryTreeNode() {
    value = null;
    left = null;
    right = null;
}

/**
 * Constructs an binary tree with one element.
 */
public BinaryTreeNode(final E value) {
    if (value == null) throw new IllegalArgumentException("null value");
    this.value = value;
    left = null;
    right = null;
}

/**
 * Constructs a binary tree containing the elements of the specified
 * collection, in the order they are returned by the collection's
 * iterator.
 *
 * @param  c the collection whose elements are to be placed into this binary tree
 * @throws NullPointerException if the specified collection is null
 */
public BinaryTreeNode(Collection&lt;? extends E&gt; c) {
    this();
    addAll(c);
}

/**
 * @inheritDoc
 *
 * &lt;p&gt;Note: null in the middle counts, so that each father in the binary tree has a
 * one-to-one mapping with the JSON array.&lt;/p&gt;
 */
public int size() {
    if (value == null) return 0;

    Queue&lt;BinaryTreeNode&lt;E&gt;&gt; queue = new LinkedList&lt;&gt;();
    queue.add(this);

    int count = 0;
    while (!queue.isEmpty()) {
        final BinaryTreeNode&lt;E&gt; node = queue.remove();
        ++count;
        if (node.left != null) {
            queue.add(node.left);
        } else {
            if (node.leftIsNull) ++count;
        }
        if (node.right != null) {
            queue.add(node.right);
        } else {
            if (node.rightIsNull) ++count;
        }
    }
    return count;
}

/**
 * Tells if the argument is the index of a valid position for an
 * iterator or an add operation.
 */
private boolean isPositionIndex(int index) {
    return index &gt;= 0 &amp;&amp; index &lt;= size();
}

/**
 * Constructs an IndexOutOfBoundsException detail message.
 * Of the many possible refactorings of the error handling code,
 * this "outlining" performs best with both server and client VMs.
 */
private String outOfBoundsMsg(int index) {
    return "Index: "+index+", Size: "+ size();
}

private void checkPositionIndex(int index) {
    if (!isPositionIndex(index))
        throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
}

private class NodeAndFather {
    private BinaryTreeNode&lt;E&gt; node;
    private BinaryTreeNode&lt;E&gt; father;
    private boolean isRight;  // the father is the right child of the father

    private NodeAndFather(BinaryTreeNode&lt;E&gt; node, BinaryTreeNode&lt;E&gt; father, boolean isRight) {
        this.node = node;
        this.father = father;
        this.isRight = isRight;
    }
}

/**
 * Returns the (may be null) Node at the specified element index.
 */
NodeAndFather node(int index) {
    checkPositionIndex(index);
    if (value == null) return null;

    Queue&lt;NodeAndFather&gt; queue = new LinkedList&lt;&gt;();
    queue.add(new NodeAndFather(this, null, false));

    for (int i = 0; !queue.isEmpty(); ++i) {
        final NodeAndFather nodeAndFather = queue.remove();
        if ( i == index) {
            return nodeAndFather;
        }

        if (nodeAndFather.node != null) {
            queue.add(new NodeAndFather(nodeAndFather.node.left, nodeAndFather.node, false));
            queue.add(new NodeAndFather(nodeAndFather.node.right, nodeAndFather.node, true));
        }
    }
    throw new IllegalArgumentException("Illegal index: " + index);
}

/**
 * @inheritDoc
 */
public ListIterator&lt;E&gt; listIterator(int index) {
    checkPositionIndex(index);
    return new ListItr(index);
}

private class ListItr implements ListIterator&lt;E&gt; {
    private NodeAndFather next;
    private int nextIndex;
    private int expectedModCount = modCount;

    ListItr(int index) {
        assert isPositionIndex(index);
        next = node(index);
        nextIndex = index;
    }

    public boolean hasNext() {
        final BinaryTreeNode&lt;E&gt; cur = next.node;
        return cur != null || (next.father.leftIsNull || next.father.rightIsNull);
    }

    //O(n)
    public E next() {
        checkForComodification();
        if (!hasNext())
            throw new NoSuchElementException();

        final E result = next.node != null ? next.node.value : null;
        next = node(nextIndex+1);
        nextIndex++;
        return result;
    }

    public boolean hasPrevious() {
        throw new UnsupportedOperationException();
    }

    public E previous() {
        throw new UnsupportedOperationException();
    }

    public int nextIndex() {
        throw new UnsupportedOperationException();
    }

    public int previousIndex() {
        throw new UnsupportedOperationException();
    }

    public void remove() {
        throw new UnsupportedOperationException();
    }

    public void set(E e) {
        throw new UnsupportedOperationException();
    }

    public void add(E e) {  // always append at the tail
        checkForComodification();

        if (next == null) { // empty list
            BinaryTreeNode.this.value = e;
            BinaryTreeNode.this.left = null;
            BinaryTreeNode.this.right = null;
        } else {
            final BinaryTreeNode&lt;E&gt; newNode = e != null ? new BinaryTreeNode&lt;&gt;(e) : null;
            if (next.father == null) { // root
                BinaryTreeNode&lt;E&gt; cur = next.node;
                cur.left = newNode;
                assert cur.right == null;
                throw new UnsupportedOperationException();
            } else {
                if (next.isRight) {
                    if (next.father.right != null) throw new IllegalStateException();
                    next.father.right = newNode;
                    if (newNode == null) {
                        next.father.rightIsNull = true;
                    }
                } else {
                    if (next.father.left != null) throw new IllegalStateException();
                    next.father.left = newNode;
                    if (newNode == null) {
                        next.father.leftIsNull = true;
                    }

                }
            }
        }
        modCount++;
        expectedModCount++;
    }

    final void checkForComodification() {
        if (modCount != expectedModCount)
            throw new ConcurrentModificationException();
    }
}

// the following functions are just for unit tests.
ArrayList&lt;E&gt; preOrder() {
    final ArrayList&lt;E&gt; result = new ArrayList&lt;&gt;();
    if (this.value == null) {
        return result;
    }
    preOrder(this, result);
    return result;
}

private static &lt;E&gt; void preOrder(BinaryTreeNode&lt;E&gt; root, ArrayList&lt;E&gt; result) {
    if (root == null)
        return;

    result.add(root.value);
    if (root.left != null)
        preOrder(root.left, result);
    if (root.right != null)
        preOrder(root.right, result);
}

ArrayList&lt;E&gt; inOrder() {
    final ArrayList&lt;E&gt; result = new ArrayList&lt;&gt;();
    if (this.value == null) {
        return result;
    }
    inOrder(this, result);
    return result;
}

private static &lt;E&gt; void inOrder(BinaryTreeNode&lt;E&gt; root, ArrayList&lt;E&gt; result) {
    if (root == null)
        return;

    if (root.left != null)
        inOrder(root.left, result);
    result.add(root.value);
    if (root.right != null)
        inOrder(root.right, result);
}

ArrayList&lt;E&gt; postOrder() {
    final ArrayList&lt;E&gt; result = new ArrayList&lt;&gt;();
    if (this.value == null) {
        return result;
    }
    postOrder(this, result);
    return result;
}

private static &lt;E&gt; void postOrder(BinaryTreeNode&lt;E&gt; root, ArrayList&lt;E&gt; result) {
    if (root == null)
        return;

    if (root.left != null)
        postOrder(root.left, result);
    if (root.right != null)
        postOrder(root.right, result);
    result.add(root.value);
}

ArrayList&lt;E&gt; levelOrder() {
    final ArrayList&lt;E&gt; result = new ArrayList&lt;&gt;();
    if (this.value == null) {
        return result;
    }

    Queue&lt;BinaryTreeNode&lt;E&gt;&gt; queue = new LinkedList&lt;&gt;();
    queue.add(this);

    while (!queue.isEmpty()) {
        final BinaryTreeNode&lt;E&gt; node = queue.remove();
        result.add(node.value);

        if (node.left != null)
            queue.add(node.left);

        if (node.right != null)
            queue.add(node.right);
    }
    return result;
}
</code></pre>

<p>}
```</p>

<p>Then comes with the unit tests:</p>

<p>```java
package me.soulmachine.customized_collection;</p>

<p>import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;</p>

<p>import java.io.IOException;
import java.util.Arrays;
import java.util.List;</p>

<p>import static org.junit.Assert.assertEquals;</p>

<p>public class BinaryTreeNodeTest
{</p>

<pre><code>@Test public void deserializeTest() throws IOException {
    ObjectMapper objectMapper = new ObjectMapper();
    final List&lt;Integer&gt; intList = Arrays.asList(2,1,10,null,null,5);

    /*
         2
        / \
       1   10
          /
         5
    */
    // TODO: the time complexity is O(n^2)
    final BinaryTreeNode&lt;Integer&gt; intTree = objectMapper.readValue("[2,1,10,null,null,5]",
        new TypeReference&lt;BinaryTreeNode&lt;Integer&gt;&gt;() {});
    assertEquals(intList, intTree);

    assertEquals(Arrays.asList(2, 1, 10, 5), intTree.levelOrder());
    assertEquals(Arrays.asList(2, 1, 10, 5), intTree.preOrder());
    assertEquals(Arrays.asList(1, 2, 5, 10), intTree.inOrder());
    assertEquals(Arrays.asList(1, 5, 10, 2), intTree.postOrder());
}
</code></pre>

<p>}
```</p>

<p>This article is inspired by <a href="https://github.com/cowtowncoder">Tatu Saloranta</a> from <a href="https://groups.google.com/forum/#!topic/jackson-user/LzfbT0fyLWc">this post</a>, special thanks to him!</p>

<h2>Related Posts</h2>

<p><a href="http://www.soulmachine.me/blog/2015/06/21/deserialize-a-json-array-to-a-singly-linked-list/">Deserialize a JSON Array to a Singly Linked List</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deserialize a JSON Array to a Singly Linked List]]></title>
    <link href="http://www.soulmachine.me/blog/2015/06/21/deserialize-a-json-array-to-a-singly-linked-list/"/>
    <updated>2015-06-21T21:19:53-07:00</updated>
    <id>http://www.soulmachine.me/blog/2015/06/21/deserialize-a-json-array-to-a-singly-linked-list</id>
    <content type="html"><![CDATA[<p>We know that Jackson is very convenient to deserialize a JSON string into a <code>ArrayList</code>, <code>HashMap</code> or POJO object.</p>

<p>But how to deserialize a JSON array, such as <code>[1,2,3,4,5]</code> to a singly linked list?</p>

<p>The definition of singly linked list is as follows:</p>

<p>```java
public class SinglyLinkedListNode<E>
{</p>

<pre><code>public E value;
public SinglyLinkedListNode&lt;E&gt; next;
</code></pre>

<p>}
```</p>

<p>Well, the solution is quite simpler than I expected:  Just make <code>SinglyLinkedListNode</code> implement <code>java.util.List</code> or <code>java.util.Collection</code> , Jackson will automatically deserialize it!</p>

<p>This idea comes from <a href="https://github.com/cowtowncoder">Tatu Saloranta</a>, the discussion post is <a href="https://groups.google.com/forum/#!topic/jackson-user/EbltfyXSVV8">here</a>, special thanks to him!</p>

<p>Here is the complete code of <code>SinglyLinkedListNode</code>:</p>

<!-- more -->


<p>```java
package org.algorithmhub.customized_collection;</p>

<p>import java.util.*;</p>

<p>/<em>*
 * Singly Linked List.
 *
 * <p>As to singly linked list, a node can be viewed as a single node,
 * and it can be viewed as a list too.</p>
 *
 * @param <E> the type of elements held in this collection
 * @see java.util.LinkedList
 </em>/
public class SinglyLinkedListNode<E></p>

<pre><code>extends AbstractSequentialList&lt;E&gt;
implements Cloneable, java.io.Serializable
</code></pre>

<p>{</p>

<pre><code>public E value;
public SinglyLinkedListNode&lt;E&gt; next;

/**
 * Constructs an empty list.
 */
public SinglyLinkedListNode() {
    value = null;
    next = null;
}

/**
 * Constructs an list with one element.
 */
public SinglyLinkedListNode(final E value, SinglyLinkedListNode&lt;E&gt; next) {
    this.value = value;
    this.next = next;
}

/**
 * Constructs a list containing the elements of the specified
 * collection, in the order they are returned by the collection's
 * iterator.
 *
 * @param  c the collection whose elements are to be placed into this list
 * @throws NullPointerException if the specified collection is null
 */
public SinglyLinkedListNode(Collection&lt;? extends E&gt; c) {
    this();
    addAll(c);
}

/**
 * @inheritDoc
 */
public int size() {
    int size = 0;
    if (value == null) return size;

    SinglyLinkedListNode&lt;E&gt; cur = this;
    while (cur != null) {
        size++;
        cur = cur.next;
    }
    return size;
}

/**
 * Tells if the argument is the index of a valid position for an
 * iterator or an add operation.
 */
private boolean isPositionIndex(int index) {
    return index &gt;= 0 &amp;&amp; index &lt;= size();
}

/**
 * Constructs an IndexOutOfBoundsException detail message.
 * Of the many possible refactorings of the error handling code,
 * this "outlining" performs best with both server and client VMs.
 */
private String outOfBoundsMsg(int index) {
    return "Index: "+index+", Size: " + size();
}

private void checkPositionIndex(int index) {
    if (!isPositionIndex(index))
        throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
}

private class PositionInfo {
    private SinglyLinkedListNode&lt;E&gt; prev;
    private SinglyLinkedListNode&lt;E&gt; cur;
    private PositionInfo(SinglyLinkedListNode&lt;E&gt; prev, SinglyLinkedListNode&lt;E&gt; cur) {
        this.prev = prev;
        this.cur = cur;
    }
}
/**
 * Returns the (non-null) Node at the specified element index.
 */
PositionInfo node(int index) {
    checkPositionIndex(index);
    if (this.value == null) return new PositionInfo(null, null);

    SinglyLinkedListNode&lt;E&gt; prev = new SinglyLinkedListNode&lt;E&gt;(null, this);
    SinglyLinkedListNode&lt;E&gt; cur = this;
    for (int i = 0; i &lt; index; i++) {
        prev = prev.next;
        cur = cur.next;
    }
    return new PositionInfo(prev, cur);
}

/**
 * @inheritDoc
 */
public ListIterator&lt;E&gt; listIterator(int index) {
    checkPositionIndex(index);
    return new ListItr(index);
}

private class ListItr implements ListIterator&lt;E&gt; {
    private SinglyLinkedListNode&lt;E&gt; prev;
    private SinglyLinkedListNode&lt;E&gt; cur;
    private int expectedModCount = modCount;

    ListItr(int index) {
        assert isPositionIndex(index);
        final PositionInfo positionInfo = node(index);
        prev = positionInfo.prev;
        cur = positionInfo.cur;
    }

    public boolean hasNext() {
        return cur != null;
    }

    public E next() {
        checkForComodification();
        if (!hasNext())
            throw new NoSuchElementException();

        final E result = cur.value;
        cur = cur.next;
        return result;
    }

    public boolean hasPrevious() {
        throw new UnsupportedOperationException();
    }

    public E previous() {
        throw new UnsupportedOperationException();
    }

    public int nextIndex() {
        throw new UnsupportedOperationException();
    }

    public int previousIndex() {
        throw new UnsupportedOperationException();
    }

    public void remove() {
        throw new UnsupportedOperationException();
    }

    public void set(E e) {
        throw new UnsupportedOperationException();
    }

    public void add(E e) {
        checkForComodification();
        if (prev == null) { // empty list
            SinglyLinkedListNode.this.value = e;
            SinglyLinkedListNode.this.next = null;
            cur = SinglyLinkedListNode.this;
        } else if (cur == null) {  // linkLast
            prev.next = new SinglyLinkedListNode&lt;&gt;(e, null);
        } else {
            final SinglyLinkedListNode&lt;E&gt; newNode = new SinglyLinkedListNode&lt;&gt;(e, cur.next);
            cur.next = newNode;
        }
        modCount++;
        expectedModCount++;
    }

    final void checkForComodification() {
        if (modCount != expectedModCount)
            throw new ConcurrentModificationException();
    }
}
</code></pre>

<p>}
```</p>

<p>Then comes with the unit tests:</p>

<p>```java
package org.algorithmhub.customized_collection;</p>

<p>import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;
import static org.junit.Assert.assertEquals;</p>

<p>import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;</p>

<p>public class SinglyLinkedListTest {</p>

<pre><code>@Test public void singlyLinkedListTest() throws IOException {
    final ObjectMapper objectMapper = new ObjectMapper();

    final SinglyLinkedListNode&lt;Integer&gt; emptyList = objectMapper.readValue("[]",
        new TypeReference&lt;SinglyLinkedListNode&lt;Integer&gt;&gt;() {});
    final SinglyLinkedListNode&lt;Integer&gt; emptyListExpected = new SinglyLinkedListNode&lt;&gt;();
    assertEquals(emptyListExpected, emptyList);

    // the time complexity is O(n)
    final SinglyLinkedListNode&lt;Integer&gt; intList = objectMapper.readValue("[1,2,3,4,5]",
        new TypeReference&lt;SinglyLinkedListNode&lt;Integer&gt;&gt;() {});
    final SinglyLinkedListNode&lt;Integer&gt; intListExpected = new SinglyLinkedListNode&lt;&gt;(1,
        new SinglyLinkedListNode&lt;&gt;(2,
            new SinglyLinkedListNode&lt;&gt;(3,
                new SinglyLinkedListNode&lt;&gt;(4,
                    new SinglyLinkedListNode&lt;&gt;(5, null)))));
    intListExpected.next = new SinglyLinkedListNode&lt;&gt;(2,
        new SinglyLinkedListNode&lt;&gt;(3,
            new SinglyLinkedListNode&lt;&gt;(4,
                new SinglyLinkedListNode&lt;&gt;(5, null))));
    assertEquals(intListExpected, intList);

    final ArrayList&lt;SinglyLinkedListNode&lt;Integer&gt;&gt; arrayOfList = objectMapper.readValue("[[1,2,3], [4,5,6]]",
        new TypeReference&lt;ArrayList&lt;SinglyLinkedListNode&lt;Integer&gt;&gt;&gt;() {});
    final ArrayList&lt;SinglyLinkedListNode&lt;Integer&gt;&gt; arrayOfListExpected = new ArrayList(Arrays.asList(
        new SinglyLinkedListNode&lt;&gt;(Arrays.asList(1, 2, 3)),
        new SinglyLinkedListNode&lt;&gt;(Arrays.asList(4, 5, 6))));
    assertEquals(arrayOfListExpected, arrayOfList);
}
</code></pre>

<p>}
```</p>

<h2>Related Posts</h2>

<p><a href="http://www.soulmachine.me/blog/2015/06/22/deserialize-a-json-string-to-a-binary-tree/">Deserialize a JSON String to a Binary Tree</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Code Style and Static Analysis]]></title>
    <link href="http://www.soulmachine.me/blog/2014/12/15/java-code-style-and-static-analysis/"/>
    <updated>2014-12-15T11:42:09-08:00</updated>
    <id>http://www.soulmachine.me/blog/2014/12/15/java-code-style-and-static-analysis</id>
    <content type="html"><![CDATA[<h2>1. Checkstyle</h2>

<p><a href="http://checkstyle.sourceforge.net/">CheckStyle</a> is a development tool to help programmers write Java code that adheres to a coding standard. It automates the process of checking Java code to spare humans of this boring (but important) task. This makes it ideal for projects that want to enforce a coding standard.</p>

<p>Which Java code style to choose? Google has published a few coding standards, include <a href="http://google-styleguide.googlecode.com/svn/trunk/javaguide.html">Google Java Style</a>. Aditionally, there are xml configuration files for Eclipse and IntelliJ in the SVN repository, <a href="https://code.google.com/p/google-styleguide/source/browse/trunk">https://code.google.com/p/google-styleguide/source/browse/trunk</a>.</p>

<p>Checkstyle Eclipse plugin has already used Google Java style by default, checkt it by clicking &ldquo;Window->Preferences->Checkstyle->Global Check Configurations&rdquo;, or at <a href="https://github.com/checkstyle/checkstyle/blob/master/google_checks.xml">https://github.com/checkstyle/checkstyle/blob/master/google_checks.xml</a>.</p>

<h3>1.1 Checkstyle Eclipse Plugin</h3>

<p>To check your coding style automatically in Eclipse, just install the Checkstyle Eclpise plugin. Launch Eclipse, click Menu &ldquo;Help &ndash;> Install New Software&rdquo;, input
<a href="http://eclipse-cs.sf.net/update/">http://eclipse-cs.sf.net/update/</a>, then click &ldquo;Next&rdquo; to install the plugin.</p>

<h3>1.2 Checkstyle Maven Plugin</h3>

<p>Add the following lines to pom.xml to enable Checkstyle:</p>

<pre><code>&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-checkstyle-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.13&lt;/version&gt;
            &lt;dependencies&gt;
                &lt;dependency&gt;
                    &lt;groupId&gt;com.puppycrawl.tools&lt;/groupId&gt;
                    &lt;artifactId&gt;checkstyle&lt;/artifactId&gt;
                    &lt;version&gt;6.1.1&lt;/version&gt;
                &lt;/dependency&gt;
            &lt;/dependencies&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;checkstyle&lt;/id&gt;
                    &lt;phase&gt;validate&lt;/phase&gt;
                    &lt;configuration&gt;
                        &lt;configLocation&gt;google_checks.xml&lt;/configLocation&gt;
                        &lt;encoding&gt;UTF-8&lt;/encoding&gt;
                        &lt;consoleOutput&gt;true&lt;/consoleOutput&gt;
                        &lt;failsOnError&gt;true&lt;/failsOnError&gt;
                        &lt;includeTestSourceDirectory&gt;true&lt;/includeTestSourceDirectory&gt;
                    &lt;/configuration&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;checkstyle&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
&lt;reporting&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-checkstyle-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.13&lt;/version&gt;
            &lt;configuration&gt;
                &lt;configLocation&gt;https://raw.githubusercontent.com/checkstyle/checkstyle/master/google_checks.xml&lt;/configLocation&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-jxr-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.5&lt;/version&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/reporting&gt;
</code></pre>

<!-- more -->


<h2>1.3 Maven Eclipse Plugin</h2>

<p>To format source code automatically according to Google Java style, import the file <a href="https://google-styleguide.googlecode.com/svn/trunk/eclipse-java-google-style.xml">eclipse-java-google-style.xml</a> into Eclipse by clicking menu &ldquo;Window->Preferences->Java->Code Style->Formatter->Import&rdquo;.</p>

<p>You can add the code style automatically via Maven, add the following lines to pom.xml:</p>

<pre><code>&lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-eclipse-plugin&lt;/artifactId&gt;
    &lt;version&gt;2.9&lt;/version&gt;
    &lt;configuration&gt;
        &lt;downloadSources&gt;true&lt;/downloadSources&gt;
        &lt;downloadJavadocs&gt;true&lt;/downloadJavadocs&gt;
        &lt;workspace&gt;${basedir}&lt;/workspace&gt;
        &lt;workspaceCodeStylesURL&gt;https://google-styleguide.googlecode.com/svn/trunk/eclipse-java-google-style.xml&lt;/workspaceCodeStylesURL&gt;
    &lt;/configuration&gt;
&lt;/plugin&gt;
</code></pre>

<h2>2 PMD</h2>

<p>Checking code style is not enough, there are many static anaylysis tools which can analyze your code and find potential bugs, for example PMD, findbugs, etc. The difference between them is <a href="http://www.sw-engineering-candies.com/blog-1/comparison-of-findbugs-pmd-and-checkstyle">http://www.sw-engineering-candies.com/blog-1/comparison-of-findbugs-pmd-and-checkstyle</a>.</p>

<p><a href="http://pmd.sourceforge.net/">PMD</a> is a source code analyzer. It finds common programming flaws like unused variables, empty catch blocks, unnecessary object creation, and so forth.</p>

<h3>2.1 PMD Eclipse Plugin</h3>

<p>PMD Eclipse plugin update site:
<a href="http://sourceforge.net/projects/pmd/files/pmd-eclipse/update-site/">http://sourceforge.net/projects/pmd/files/pmd-eclipse/update-site/</a>.</p>

<h3>2.2 Maven PMD Plugin</h3>

<p>To enable automatically static analysis during compilation, add the following lines to pom.xml:</p>

<pre><code>&lt;build&gt;
    &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-pmd-plugin&lt;/artifactId&gt;
        &lt;version&gt;3.3&lt;/version&gt;
        &lt;executions&gt;
            &lt;execution&gt;
                &lt;phase&gt;validate&lt;/phase&gt;
                &lt;goals&gt;
                    &lt;goal&gt;check&lt;/goal&gt;
                    &lt;goal&gt;cpd-check&lt;/goal&gt;
                &lt;/goals&gt;
            &lt;/execution&gt;
        &lt;/executions&gt;
    &lt;/plugin&gt;
&lt;/build&gt;
&lt;reporting&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;artifactId&gt;maven-pmd-plugin&lt;/artifactId&gt;
            &lt;version&gt;3.3&lt;/version&gt;
            &lt;reportSets&gt;
                &lt;reportSet&gt;
                    &lt;reports&gt;
                        &lt;report&gt;pmd&lt;/report&gt;
                        &lt;report&gt;cpd&lt;/report&gt;
                    &lt;/reports&gt;
                &lt;/reportSet&gt;
            &lt;/reportSets&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/reporting&gt;
</code></pre>

<h2>3. FindBugs</h2>

<h3>3.1 FindBugs Eclipse Plugin</h3>

<p>Eclipse Update Site: <a href="http://findbugs.cs.umd.edu/eclipse">http://findbugs.cs.umd.edu/eclipse</a></p>

<h3>3.2 Maven FindBugs Plugin</h3>

<p>Official site: <a href="http://mojo.codehaus.org/findbugs-maven-plugin/">http://mojo.codehaus.org/findbugs-maven-plugin/</a></p>

<p>To configure your build to fail if any errors are found in the FindBugs report, add the following lines to pom.xml.</p>

<pre><code>&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
            &lt;artifactId&gt;findbugs-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;3.0.1-SNAPSHOT&lt;/version&gt;
            &lt;configuration&gt;
                &lt;effort&gt;Max&lt;/effort&gt;
                &lt;threshold&gt;Low&lt;/threshold&gt;
                &lt;xmlOutput&gt;true&lt;/xmlOutput&gt;
            &lt;/configuration&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;check&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
</code></pre>

<p>Reference: <a href="http://mojo.codehaus.org/findbugs-maven-plugin/examples/violationChecking.html">http://mojo.codehaus.org/findbugs-maven-plugin/examples/violationChecking.html</a></p>

<h2>4. What&rsquo;s next?</h2>

<p>Nowadays there are many tools that are more powerful and automatic, for example, <a href="http://www.sonarqube.org/">SonarQube</a>, <a href="http://www.coverity.com/">Coverity</a>. SonarQube is an open source quality management platform, dedicated to continuously analyze and measure source code quality, and has been used by <a href="http://zeroturnaround.com/rebellabs/developers-guide-static-code-analysis-findbugs-checkstyle-pmd-coverity-sonarqube/">many companies</a>, I will try it in the next step.</p>
]]></content>
  </entry>
  
</feed>
