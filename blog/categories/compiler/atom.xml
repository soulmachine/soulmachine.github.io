<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Compiler | soulmachine]]></title>
  <link href="http://www.soulmachine.me/blog/categories/compiler/atom.xml" rel="self"/>
  <link href="http://www.soulmachine.me/"/>
  <updated>2015-07-23T15:46:32-07:00</updated>
  <id>http://www.soulmachine.me/</id>
  <author>
    <name><![CDATA[soulmachine]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Compile and Run Java Source Code in Memory]]></title>
    <link href="http://www.soulmachine.me/blog/2015/07/22/compile-and-run-java-source-code-in-memory/"/>
    <updated>2015-07-22T15:42:18-07:00</updated>
    <id>http://www.soulmachine.me/blog/2015/07/22/compile-and-run-java-source-code-in-memory</id>
    <content type="html"><![CDATA[<p>In this blog I will show you how to compile and run Java source code on the fly in memory. In other words, use Java as a script language.</p>

<p>Here are the three source code files.</p>

<p>```java
package me.soulmachine.compiler;</p>

<p>import java.io.IOException;
import java.io.PrintWriter;
import java.io.Writer;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;</p>

<p>import javax.tools.*;</p>

<p>/<em>*
 * Simple interface to Java compiler using JSR 199 Compiler API.
 </em>/
public class MemoryJavaCompiler {</p>

<pre><code>private javax.tools.JavaCompiler tool;
private StandardJavaFileManager stdManager;

public MemoryJavaCompiler() {
    tool = ToolProvider.getSystemJavaCompiler();
    if (tool == null) {
        throw new RuntimeException("Could not get Java compiler. Please, ensure that JDK is used instead of JRE.");
    }
    stdManager = tool.getStandardFileManager(null, null, null);
}

/**
 * Compile a single static method.
 */
public Method compileStaticMethod(final String methodName, final String className,
    final String source)
    throws ClassNotFoundException {
    final Map&lt;String, byte[]&gt; classBytes = compile(className + ".java", source);
    final MemoryClassLoader classLoader = new MemoryClassLoader(classBytes);
    final Class clazz = classLoader.loadClass(className);
    final Method[] methods = clazz.getDeclaredMethods();
    for (final Method method : methods) {
        if (method.getName().equals(methodName)) {
            if (!method.isAccessible()) method.setAccessible(true);
            return method;
        }
    }
    throw new NoSuchMethodError(methodName);
}


public Map&lt;String, byte[]&gt; compile(String fileName, String source) {
    return compile(fileName, source, new PrintWriter(System.err), null, null);
}


/**
 * compile given String source and return bytecodes as a Map.
 *
 * @param fileName source fileName to be used for error messages etc.
 * @param source Java source as String
 * @param err error writer where diagnostic messages are written
 * @param sourcePath location of additional .java source files
 * @param classPath location of additional .class files
 */
private Map&lt;String, byte[]&gt; compile(String fileName, String source,
    Writer err, String sourcePath, String classPath) {
    // to collect errors, warnings etc.
    DiagnosticCollector&lt;JavaFileObject&gt; diagnostics =
        new DiagnosticCollector&lt;JavaFileObject&gt;();

    // create a new memory JavaFileManager
    MemoryJavaFileManager fileManager = new MemoryJavaFileManager(stdManager);

    // prepare the compilation unit
    List&lt;JavaFileObject&gt; compUnits = new ArrayList&lt;JavaFileObject&gt;(1);
    compUnits.add(fileManager.makeStringSource(fileName, source));

    return compile(compUnits, fileManager, err, sourcePath, classPath);
}

private Map&lt;String, byte[]&gt; compile(final List&lt;JavaFileObject&gt; compUnits, 
    final MemoryJavaFileManager fileManager,
    Writer err, String sourcePath, String classPath) {
    // to collect errors, warnings etc.
    DiagnosticCollector&lt;JavaFileObject&gt; diagnostics =
        new DiagnosticCollector&lt;JavaFileObject&gt;();

    // javac options
    List&lt;String&gt; options = new ArrayList&lt;String&gt;();
    options.add("-Xlint:all");
    //      options.add("-g:none");
    options.add("-deprecation");
    if (sourcePath != null) {
        options.add("-sourcepath");
        options.add(sourcePath);
    }

    if (classPath != null) {
        options.add("-classpath");
        options.add(classPath);
    }

    // create a compilation task
    javax.tools.JavaCompiler.CompilationTask task =
        tool.getTask(err, fileManager, diagnostics,
            options, null, compUnits);

    if (task.call() == false) {
        PrintWriter perr = new PrintWriter(err);
        for (Diagnostic diagnostic : diagnostics.getDiagnostics()) {
            perr.println(diagnostic);
        }
        perr.flush();
        return null;
    }

    Map&lt;String, byte[]&gt; classBytes = fileManager.getClassBytes();
    try {
        fileManager.close();
    } catch (IOException exp) {
    }

    return classBytes;
}
</code></pre>

<p>}
```</p>

<!-- more -->


<p>```java
package me.soulmachine.compiler;</p>

<p>import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URI;
import java.nio.CharBuffer;
import java.util.HashMap;
import java.util.Map;</p>

<p>import javax.tools.FileObject;
import javax.tools.ForwardingJavaFileManager;
import javax.tools.JavaFileManager;
import javax.tools.JavaFileObject;
import javax.tools.JavaFileObject.Kind;
import javax.tools.SimpleJavaFileObject;</p>

<p>/<em>*
 * JavaFileManager that keeps compiled .class bytes in memory.
 </em>/
@SuppressWarnings(&ldquo;unchecked&rdquo;)
final class MemoryJavaFileManager extends ForwardingJavaFileManager {</p>

<pre><code>/** Java source file extension. */
private final static String EXT = ".java";

private Map&lt;String, byte[]&gt; classBytes;

public MemoryJavaFileManager(JavaFileManager fileManager) {
    super(fileManager);
    classBytes = new HashMap&lt;&gt;();
}

public Map&lt;String, byte[]&gt; getClassBytes() {
    return classBytes;
}

public void close() throws IOException {
    classBytes = null;
}

public void flush() throws IOException {
}

/**
 * A file object used to represent Java source coming from a string.
 */
private static class StringInputBuffer extends SimpleJavaFileObject {
    final String code;

    StringInputBuffer(String fileName, String code) {
        super(toURI(fileName), Kind.SOURCE);
        this.code = code;
    }

    public CharBuffer getCharContent(boolean ignoreEncodingErrors) {
        return CharBuffer.wrap(code);
    }
}

/**
 * A file object that stores Java bytecode into the classBytes map.
 */
private class ClassOutputBuffer extends SimpleJavaFileObject {
    private String name;

    ClassOutputBuffer(String name) {
        super(toURI(name), Kind.CLASS);
        this.name = name;
    }

    public OutputStream openOutputStream() {
        return new FilterOutputStream(new ByteArrayOutputStream()) {
            public void close() throws IOException {
                out.close();
                ByteArrayOutputStream bos = (ByteArrayOutputStream)out;
                classBytes.put(name, bos.toByteArray());
            }
        };
    }
}

public JavaFileObject getJavaFileForOutput(JavaFileManager.Location location,
    String className,
    Kind kind,
    FileObject sibling) throws IOException {
    if (kind == Kind.CLASS) {
        return new ClassOutputBuffer(className);
    } else {
        return super.getJavaFileForOutput(location, className, kind, sibling);
    }
}

static JavaFileObject makeStringSource(String fileName, String code) {
    return new StringInputBuffer(fileName, code);
}

static URI toURI(String name) {
    File file = new File(name);
    if (file.exists()) {
        return file.toURI();
    } else {
        try {
            final StringBuilder newUri = new StringBuilder();
            newUri.append("mfm:///");
            newUri.append(name.replace('.', '/'));
            if(name.endsWith(EXT)) newUri.replace(newUri.length() - EXT.length(), newUri.length(), EXT);
            return URI.create(newUri.toString());
        } catch (Exception exp) {
            return URI.create("mfm:///com/sun/script/java/java_source");
        }
    }
}
</code></pre>

<p>}
```</p>

<p>```java
package me.soulmachine.compiler;</p>

<p>import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;</p>

<p>/<em>*
 * ClassLoader that loads .class bytes from memory.
 </em>/
final class MemoryClassLoader extends URLClassLoader {</p>

<pre><code>private Map&lt;String, byte[]&gt; classBytes;

public MemoryClassLoader(Map&lt;String, byte[]&gt; classBytes,
    String classPath, ClassLoader parent) {
    super(toURLs(classPath), parent);
    this.classBytes = classBytes;
}

public MemoryClassLoader(Map&lt;String, byte[]&gt; classBytes, String classPath) {
    this(classBytes, classPath, ClassLoader.getSystemClassLoader());
}

public MemoryClassLoader(Map&lt;String, byte[]&gt; classBytes) {
    this(classBytes, null, ClassLoader.getSystemClassLoader());
}

public Class load(String className) throws ClassNotFoundException {
    return loadClass(className);
}

public Iterable&lt;Class&gt; loadAll() throws ClassNotFoundException {
    List&lt;Class&gt; classes = new ArrayList&lt;Class&gt;(classBytes.size());
    for (String name : classBytes.keySet()) {
        classes.add(loadClass(name));
    }
    return classes;
}

protected Class findClass(String className) throws ClassNotFoundException {
    byte[] buf = classBytes.get(className);
    if (buf != null) {
        // clear the bytes in map -- we don't need it anymore
        classBytes.put(className, null);
        return defineClass(className, buf, 0, buf.length);
    } else {
        return super.findClass(className);
    }
}

private static URL[] toURLs(String classPath) {
    if (classPath == null) {
        return new URL[0];
    }

    List&lt;URL&gt; list = new ArrayList&lt;URL&gt;();
    StringTokenizer st = new StringTokenizer(classPath, File.pathSeparator);
    while (st.hasMoreTokens()) {
        String token = st.nextToken();
        File file = new File(token);
        if (file.exists()) {
            try {
                list.add(file.toURI().toURL());
            } catch (MalformedURLException mue) {}
        } else {
            try {
                list.add(new URL(token));
            } catch (MalformedURLException mue) {}
        }
    }
    URL[] res = new URL[list.size()];
    list.toArray(res);
    return res;
}
</code></pre>

<p>}
```</p>

<p><strong>Explanations</strong>:</p>

<ol>
<li>In order to represent a  Java source file in memory instead of disk, I defined a <code>StringInputBuffer</code> class in the <code>MemoryJavaFileManager.java</code>.</li>
<li>To save the compiled <code>.class</code> files in memory, I implemented a class <code>MemoryJavaFileManager</code>.  The main idea is to override the function <code>getJavaFileForOutput()</code> to store bytecodes into a map.</li>
<li>To load the bytecodes in memory, I have to implement a customized classloader <code>MemoryClassLoader</code>, which reads bytecodes in the map and turn them into classes.</li>
</ol>


<p>Here is a unite test.</p>

<p>```java
package me.soulmachine.compiler;</p>

<p>import org.junit.Test;</p>

<p>import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;</p>

<p>import static org.junit.Assert.assertEquals;</p>

<p>public class MemoryJavaCompilerTest {</p>

<pre><code>private final static MemoryJavaCompiler compiler = new MemoryJavaCompiler();

@Test public void compileStaticMethodTest()
    throws ClassNotFoundException, InvocationTargetException, IllegalAccessException {
    final String source = "public final class Solution {\n"
        + "public static String greeting(String name) {\n"
        + "\treturn \"Hello \" + name;\n" + "}\n}\n";
    final Method greeting = compiler.compileStaticMethod("greeting", "Solution", source);
    final Object result = greeting.invoke(null, "soulmachine");
    assertEquals("Hello soulmachine", result.toString());
}
</code></pre>

<p>}
```</p>

<h2>Reference</h2>

<ol>
<li><a href="https://github.com/kite-sdk/kite/tree/master/kite-morphlines/kite-morphlines-core/src/main/java/org/kitesdk/morphline/scriptengine/java">JavaCompiler.java from Cloudera Morphlines</a></li>
<li><a href="http://stackoverflow.com/questions/1168931/how-to-create-an-object-from-a-string-in-java-how-to-eval-a-string">How to create an object from a string in Java (how to eval a string)?</a></li>
<li><a href="https://github.com/trung/InMemoryJavaCompiler">InMemoryJavaCompiler</a></li>
<li><a href="https://github.com/OpenHFT/Java-Runtime-Compiler">Java-Runtime-Compiler</a></li>
<li><a href="http://pfmiles.github.io/blog/dynamic-java/">动态的Java &ndash; 无废话JavaCompilerAPI中文指南</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
