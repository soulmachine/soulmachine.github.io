<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[soulmachine]]></title>
  <link href="http://www.soulmachine.me/atom.xml" rel="self"/>
  <link href="http://www.soulmachine.me/"/>
  <updated>2015-06-22T02:32:42-07:00</updated>
  <id>http://www.soulmachine.me/</id>
  <author>
    <name><![CDATA[soulmachine]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Deserialize a JSON String to a Binary Tree]]></title>
    <link href="http://www.soulmachine.me/blog/2015/06/22/deserialize-a-json-string-to-a-binary-tree/"/>
    <updated>2015-06-22T01:36:02-07:00</updated>
    <id>http://www.soulmachine.me/blog/2015/06/22/deserialize-a-json-string-to-a-binary-tree</id>
    <content type="html"><![CDATA[<h2>A simple solution</h2>

<p>We know that Jackson is very convenient to deserialize a JSON string into a <code>ArrayList</code>, <code>HashMap</code> or POJO object.</p>

<p>But how to deserialize a JSON String to a binary tree?</p>

<p>The definition of binary tree node is as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BinaryTreeNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">E</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">BinaryTreeNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">left</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">BinaryTreeNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">right</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The JSON String is as follows:</p>

<pre><code>{
   "value": 2,
   "left": {
    "value": 1,
    "left": null,
    "right": null
  },
  "right": {
    "value": 10,
    "left": {
      "value": 5,
      "left": null,
      "right": null
    },
    "right": null
  }
}
</code></pre>

<p>The above JSON string represents a binary tree as the following:</p>

<pre><code>  2
 / \
1   10
   /
  5
</code></pre>

<p>The solution is quite simpler, since JSON can express tree naturally, Jackson can deal with recursive tree directly. Just annotate a constructor with <code>JsonCreator</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">BinaryTreeNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">E</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">BinaryTreeNode</span> <span class="n">left</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">BinaryTreeNode</span> <span class="n">right</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@JsonCreator</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">BinaryTreeNode</span><span class="o">(</span><span class="nd">@JsonProperty</span><span class="o">(</span><span class="s">&quot;value&quot;</span><span class="o">)</span> <span class="kd">final</span> <span class="n">E</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s write a unite test to try it:</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">soulmachine</span><span class="o">.</span><span class="na">customized_collection</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.fasterxml.jackson.annotation.JsonCreator</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.fasterxml.jackson.annotation.JsonProperty</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.fasterxml.jackson.core.type.TypeReference</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.ObjectMapper</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BinaryTreeNodeTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">BinaryTreeNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">E</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">BinaryTreeNode</span> <span class="n">left</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">BinaryTreeNode</span> <span class="n">right</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@JsonCreator</span>
</span><span class='line'>        <span class="kd">public</span> <span class="nf">BinaryTreeNode</span><span class="o">(</span><span class="nd">@JsonProperty</span><span class="o">(</span><span class="s">&quot;value&quot;</span><span class="o">)</span> <span class="kd">final</span> <span class="n">E</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="nf">preOrder</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">preOrder</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">preOrder</span><span class="o">(</span><span class="n">BinaryTreeNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">root</span><span class="o">,</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                <span class="k">return</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                <span class="n">preOrder</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                <span class="n">preOrder</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="nd">@Test</span> <span class="kd">public</span> <span class="kt">void</span> <span class="n">binaryTreeNodeTest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ObjectMapper</span><span class="o">();</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">             2</span>
</span><span class='line'><span class="cm">            / \</span>
</span><span class='line'><span class="cm">           1   10</span>
</span><span class='line'><span class="cm">              /</span>
</span><span class='line'><span class="cm">             5</span>
</span><span class='line'><span class="cm">        */</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">String</span> <span class="n">jsonStr</span> <span class="o">=</span> <span class="s">&quot;{\n&quot;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;  \&quot;value\&quot;: 2,\n&quot;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;  \&quot;left\&quot;: {\n&quot;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;    \&quot;value\&quot;: 1,\n&quot;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;    \&quot;left\&quot;: null,\n&quot;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;    \&quot;right\&quot;: null\n&quot;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;  },\n&quot;</span> <span class="o">+</span> <span class="s">&quot;  \&quot;right\&quot;: {\n&quot;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;    \&quot;value\&quot;: 10,\n&quot;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;    \&quot;left\&quot;: {\n&quot;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;      \&quot;value\&quot;: 5,\n&quot;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;      \&quot;left\&quot;: null,\n&quot;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;      \&quot;right\&quot;: null\n&quot;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;    },\n&quot;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;    \&quot;right\&quot;: null\n&quot;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;  }\n&quot;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;}&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">jsonStr</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">BinaryTreeNode</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">intTree</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">jsonStr</span><span class="o">,</span>
</span><span class='line'>            <span class="k">new</span> <span class="n">TypeReference</span><span class="o">&lt;</span><span class="n">BinaryTreeNode</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;()</span> <span class="o">{});</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">listExpected</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
</span><span class='line'>        <span class="n">assertEquals</span><span class="o">(</span><span class="n">listExpected</span><span class="o">,</span> <span class="n">intTree</span><span class="o">.</span><span class="na">preOrder</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>A compact serialization format</h2>

<p>Well, there is a little problem here, the JSON string above is very verbose. Let&rsquo;s use another kind of serialization format, i.e., serialize a binary tree in level order traversal. For example, the binary tree above can be serialized as the following JSON string:</p>

<pre><code>[2,1,10,null,null,5] 
</code></pre>

<p>Now how to deserialize this JSON string to a binary tree?</p>

<p>The idea is very similar to my previous article, <a href="http://www.soulmachine.me/blog/2015/06/21/deserialize-a-json-array-to-a-singly-linked-list/">Deserialize a JSON Array to a Singly Linked List</a>. Just make the <code>BinaryTreeNode</code> implement <code>java.util.list</code>,  pretend that it&rsquo;s a list, write our own deserialization code so that Jackson can treat a binary tree as a list.</p>

<p>The complete code of <code>BinaryTreeNode</code> is as the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">soulmachine</span><span class="o">.</span><span class="na">customized_collection</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BinaryTreeNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">AbstractSequentialList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="kd">implements</span> <span class="n">Cloneable</span><span class="o">,</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">Serializable</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">E</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">BinaryTreeNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">left</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">BinaryTreeNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">right</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** has a left child, but it&#39;s a null node. */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">transient</span> <span class="kt">boolean</span> <span class="n">leftIsNull</span><span class="o">;</span>
</span><span class='line'>    <span class="cm">/** has a right child, but it&#39;s a null node. */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">transient</span> <span class="kt">boolean</span> <span class="n">rightIsNull</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Constructs an empty binary tree.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">BinaryTreeNode</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">left</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">right</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Constructs an binary tree with one element.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">BinaryTreeNode</span><span class="o">(</span><span class="kd">final</span> <span class="n">E</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;null value&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>        <span class="n">left</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">right</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Constructs a binary tree containing the elements of the specified</span>
</span><span class='line'><span class="cm">     * collection, in the order they are returned by the collection&#39;s</span>
</span><span class='line'><span class="cm">     * iterator.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param  c the collection whose elements are to be placed into this binary tree</span>
</span><span class='line'><span class="cm">     * @throws NullPointerException if the specified collection is null</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">BinaryTreeNode</span><span class="o">(</span><span class="n">Collection</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">E</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">();</span>
</span><span class='line'>        <span class="n">addAll</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * @inheritDoc</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * &lt;p&gt;Note: null in the middle counts, so that each father in the binary tree has a</span>
</span><span class='line'><span class="cm">     * one-to-one mapping with the JSON array.&lt;/p&gt;</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">size</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Queue</span><span class="o">&lt;</span><span class="n">BinaryTreeNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>        <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(!</span><span class="n">queue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">BinaryTreeNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">node</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
</span><span class='line'>            <span class="o">++</span><span class="n">count</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">leftIsNull</span><span class="o">)</span> <span class="o">++</span><span class="n">count</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">rightIsNull</span><span class="o">)</span> <span class="o">++</span><span class="n">count</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">count</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Tells if the argument is the index of a valid position for an</span>
</span><span class='line'><span class="cm">     * iterator or an add operation.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isPositionIndex</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">index</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">index</span> <span class="o">&lt;=</span> <span class="n">size</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Constructs an IndexOutOfBoundsException detail message.</span>
</span><span class='line'><span class="cm">     * Of the many possible refactorings of the error handling code,</span>
</span><span class='line'><span class="cm">     * this &quot;outlining&quot; performs best with both server and client VMs.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="nf">outOfBoundsMsg</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;Index: &quot;</span><span class="o">+</span><span class="n">index</span><span class="o">+</span><span class="s">&quot;, Size: &quot;</span><span class="o">+</span> <span class="n">size</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">checkPositionIndex</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">isPositionIndex</span><span class="o">(</span><span class="n">index</span><span class="o">))</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IndexOutOfBoundsException</span><span class="o">(</span><span class="n">outOfBoundsMsg</span><span class="o">(</span><span class="n">index</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">NodeAndFather</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">BinaryTreeNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">node</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">BinaryTreeNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">father</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">isRight</span><span class="o">;</span>  <span class="c1">// the father is the right child of the father</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="nf">NodeAndFather</span><span class="o">(</span><span class="n">BinaryTreeNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">node</span><span class="o">,</span> <span class="n">BinaryTreeNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">father</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">isRight</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">;</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">father</span> <span class="o">=</span> <span class="n">father</span><span class="o">;</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">isRight</span> <span class="o">=</span> <span class="n">isRight</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Returns the (may be null) Node at the specified element index.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">NodeAndFather</span> <span class="nf">node</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">checkPositionIndex</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Queue</span><span class="o">&lt;</span><span class="n">NodeAndFather</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>        <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">NodeAndFather</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">false</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="o">!</span><span class="n">queue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">();</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">NodeAndFather</span> <span class="n">nodeAndFather</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span> <span class="n">i</span> <span class="o">==</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">nodeAndFather</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">nodeAndFather</span><span class="o">.</span><span class="na">node</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">NodeAndFather</span><span class="o">(</span><span class="n">nodeAndFather</span><span class="o">.</span><span class="na">node</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">nodeAndFather</span><span class="o">.</span><span class="na">node</span><span class="o">,</span> <span class="kc">false</span><span class="o">));</span>
</span><span class='line'>                <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">NodeAndFather</span><span class="o">(</span><span class="n">nodeAndFather</span><span class="o">.</span><span class="na">node</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">nodeAndFather</span><span class="o">.</span><span class="na">node</span><span class="o">,</span> <span class="kc">true</span><span class="o">));</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;Illegal index: &quot;</span> <span class="o">+</span> <span class="n">index</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * @inheritDoc</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">ListIterator</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="nf">listIterator</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">checkPositionIndex</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">ListItr</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">ListItr</span> <span class="kd">implements</span> <span class="n">ListIterator</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">NodeAndFather</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kt">int</span> <span class="n">nextIndex</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kt">int</span> <span class="n">expectedModCount</span> <span class="o">=</span> <span class="n">modCount</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ListItr</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">assert</span> <span class="nf">isPositionIndex</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class='line'>            <span class="n">next</span> <span class="o">=</span> <span class="n">node</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class='line'>            <span class="n">nextIndex</span> <span class="o">=</span> <span class="n">index</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasNext</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">BinaryTreeNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">next</span><span class="o">.</span><span class="na">node</span><span class="o">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">cur</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">||</span> <span class="o">(</span><span class="n">next</span><span class="o">.</span><span class="na">father</span><span class="o">.</span><span class="na">leftIsNull</span> <span class="o">||</span> <span class="n">next</span><span class="o">.</span><span class="na">father</span><span class="o">.</span><span class="na">rightIsNull</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//O(n)</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">E</span> <span class="nf">next</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">checkForComodification</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">hasNext</span><span class="o">())</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">NoSuchElementException</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">final</span> <span class="n">E</span> <span class="n">result</span> <span class="o">=</span> <span class="n">next</span><span class="o">.</span><span class="na">node</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">?</span> <span class="n">next</span><span class="o">.</span><span class="na">node</span><span class="o">.</span><span class="na">value</span> <span class="o">:</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="n">next</span> <span class="o">=</span> <span class="n">node</span><span class="o">(</span><span class="n">nextIndex</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="n">nextIndex</span><span class="o">++;</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasPrevious</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="n">E</span> <span class="nf">previous</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">nextIndex</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">previousIndex</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">remove</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="n">E</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="n">E</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">// always append at the tail</span>
</span><span class='line'>            <span class="n">checkForComodification</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">next</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// empty list</span>
</span><span class='line'>                <span class="n">BinaryTreeNode</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">e</span><span class="o">;</span>
</span><span class='line'>                <span class="n">BinaryTreeNode</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>                <span class="n">BinaryTreeNode</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">final</span> <span class="n">BinaryTreeNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">newNode</span> <span class="o">=</span> <span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">?</span> <span class="k">new</span> <span class="n">BinaryTreeNode</span><span class="o">&lt;&gt;(</span><span class="n">e</span><span class="o">)</span> <span class="o">:</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">next</span><span class="o">.</span><span class="na">father</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// root</span>
</span><span class='line'>                    <span class="n">BinaryTreeNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">next</span><span class="o">.</span><span class="na">node</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">cur</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">newNode</span><span class="o">;</span>
</span><span class='line'>                    <span class="k">assert</span> <span class="n">cur</span><span class="o">.</span><span class="na">right</span> <span class="o">==</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">next</span><span class="o">.</span><span class="na">isRight</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">next</span><span class="o">.</span><span class="na">father</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalStateException</span><span class="o">();</span>
</span><span class='line'>                        <span class="n">next</span><span class="o">.</span><span class="na">father</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">newNode</span><span class="o">;</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">newNode</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">next</span><span class="o">.</span><span class="na">father</span><span class="o">.</span><span class="na">rightIsNull</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">next</span><span class="o">.</span><span class="na">father</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalStateException</span><span class="o">();</span>
</span><span class='line'>                        <span class="n">next</span><span class="o">.</span><span class="na">father</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">newNode</span><span class="o">;</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">newNode</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">next</span><span class="o">.</span><span class="na">father</span><span class="o">.</span><span class="na">leftIsNull</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">modCount</span><span class="o">++;</span>
</span><span class='line'>            <span class="n">expectedModCount</span><span class="o">++;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">void</span> <span class="nf">checkForComodification</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">modCount</span> <span class="o">!=</span> <span class="n">expectedModCount</span><span class="o">)</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ConcurrentModificationException</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// the following functions are just for unit tests.</span>
</span><span class='line'>    <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="nf">preOrder</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">preOrder</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">preOrder</span><span class="o">(</span><span class="n">BinaryTreeNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">root</span><span class="o">,</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="n">preOrder</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="n">preOrder</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="nf">inOrder</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">inOrder</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">inOrder</span><span class="o">(</span><span class="n">BinaryTreeNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">root</span><span class="o">,</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="n">inOrder</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'>        <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="n">inOrder</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="nf">postOrder</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">postOrder</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">postOrder</span><span class="o">(</span><span class="n">BinaryTreeNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">root</span><span class="o">,</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="n">postOrder</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="n">postOrder</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'>        <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="nf">levelOrder</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Queue</span><span class="o">&lt;</span><span class="n">BinaryTreeNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>        <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="o">(!</span><span class="n">queue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">BinaryTreeNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">node</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
</span><span class='line'>            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then comes with the unit tests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">soulmachine</span><span class="o">.</span><span class="na">customized_collection</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.fasterxml.jackson.core.type.TypeReference</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.ObjectMapper</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BinaryTreeNodeTest</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="nd">@Test</span> <span class="kd">public</span> <span class="kt">void</span> <span class="n">deserializeTest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ObjectMapper</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">intList</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">10</span><span class="o">,</span><span class="kc">null</span><span class="o">,</span><span class="kc">null</span><span class="o">,</span><span class="mi">5</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">             2</span>
</span><span class='line'><span class="cm">            / \</span>
</span><span class='line'><span class="cm">           1   10</span>
</span><span class='line'><span class="cm">              /</span>
</span><span class='line'><span class="cm">             5</span>
</span><span class='line'><span class="cm">        */</span>
</span><span class='line'>        <span class="c1">// TODO: the time complexity is O(n^2)</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">BinaryTreeNode</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">intTree</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="s">&quot;[2,1,10,null,null,5]&quot;</span><span class="o">,</span>
</span><span class='line'>            <span class="k">new</span> <span class="n">TypeReference</span><span class="o">&lt;</span><span class="n">BinaryTreeNode</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;()</span> <span class="o">{});</span>
</span><span class='line'>        <span class="n">assertEquals</span><span class="o">(</span><span class="n">intList</span><span class="o">,</span> <span class="n">intTree</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">assertEquals</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">5</span><span class="o">),</span> <span class="n">intTree</span><span class="o">.</span><span class="na">levelOrder</span><span class="o">());</span>
</span><span class='line'>        <span class="n">assertEquals</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">5</span><span class="o">),</span> <span class="n">intTree</span><span class="o">.</span><span class="na">preOrder</span><span class="o">());</span>
</span><span class='line'>        <span class="n">assertEquals</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">10</span><span class="o">),</span> <span class="n">intTree</span><span class="o">.</span><span class="na">inOrder</span><span class="o">());</span>
</span><span class='line'>        <span class="n">assertEquals</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">2</span><span class="o">),</span> <span class="n">intTree</span><span class="o">.</span><span class="na">postOrder</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This article is inspired by <a href="https://github.com/cowtowncoder">Tatu Saloranta</a> from <a href="https://groups.google.com/forum/#!topic/jackson-user/LzfbT0fyLWc">this post</a>, special thanks to him!</p>

<h2>Related Posts</h2>

<p><a href="http://www.soulmachine.me/blog/2015/06/21/deserialize-a-json-array-to-a-singly-linked-list/">Deserialize a JSON Array to a Singly Linked List</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deserialize a JSON Array to a Singly Linked List]]></title>
    <link href="http://www.soulmachine.me/blog/2015/06/21/deserialize-a-json-array-to-a-singly-linked-list/"/>
    <updated>2015-06-21T21:19:53-07:00</updated>
    <id>http://www.soulmachine.me/blog/2015/06/21/deserialize-a-json-array-to-a-singly-linked-list</id>
    <content type="html"><![CDATA[<p>We know that Jackson is very convenient to deserialize a JSON string into a <code>ArrayList</code>, <code>HashMap</code> or POJO object.</p>

<p>But how to deserialize a JSON array, such as <code>[1,2,3,4,5]</code> to a singly linked list?</p>

<p>The definition of singly linked list is as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SinglyLinkedListNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">E</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">SinglyLinkedListNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, the solution is quite simpler than I expected:  Just make <code>SinglyLinkedListNode</code> implement <code>java.util.List</code> or <code>java.util.Collection</code> , Jackson will automatically deserialize it!</p>

<p>This idea comes from <a href="https://github.com/cowtowncoder">Tatu Saloranta</a>, the discussion post is <a href="https://groups.google.com/forum/#!topic/jackson-user/EbltfyXSVV8">here</a>, special thanks to him!</p>

<p>Here is the complete code of <code>SinglyLinkedListNode</code>:</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">algorithmhub</span><span class="o">.</span><span class="na">customized_collection</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Singly Linked List.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * &lt;p&gt;As to singly linked list, a node can be viewed as a single node,</span>
</span><span class='line'><span class="cm"> * and it can be viewed as a list too.&lt;/p&gt;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param &lt;E&gt; the type of elements held in this collection</span>
</span><span class='line'><span class="cm"> * @see java.util.LinkedList</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SinglyLinkedListNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="kd">extends</span> <span class="n">AbstractSequentialList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="kd">implements</span> <span class="n">Cloneable</span><span class="o">,</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">Serializable</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">E</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">SinglyLinkedListNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Constructs an empty list.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">SinglyLinkedListNode</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">next</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Constructs an list with one element.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">SinglyLinkedListNode</span><span class="o">(</span><span class="kd">final</span> <span class="n">E</span> <span class="n">value</span><span class="o">,</span> <span class="n">SinglyLinkedListNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">next</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Constructs a list containing the elements of the specified</span>
</span><span class='line'><span class="cm">     * collection, in the order they are returned by the collection&#39;s</span>
</span><span class='line'><span class="cm">     * iterator.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param  c the collection whose elements are to be placed into this list</span>
</span><span class='line'><span class="cm">     * @throws NullPointerException if the specified collection is null</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">SinglyLinkedListNode</span><span class="o">(</span><span class="n">Collection</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">E</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">();</span>
</span><span class='line'>        <span class="n">addAll</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * @inheritDoc</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">size</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">SinglyLinkedListNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">cur</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">cur</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">size</span><span class="o">++;</span>
</span><span class='line'>            <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Tells if the argument is the index of a valid position for an</span>
</span><span class='line'><span class="cm">     * iterator or an add operation.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isPositionIndex</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">index</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">index</span> <span class="o">&lt;=</span> <span class="n">size</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Constructs an IndexOutOfBoundsException detail message.</span>
</span><span class='line'><span class="cm">     * Of the many possible refactorings of the error handling code,</span>
</span><span class='line'><span class="cm">     * this &quot;outlining&quot; performs best with both server and client VMs.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="nf">outOfBoundsMsg</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;Index: &quot;</span><span class="o">+</span><span class="n">index</span><span class="o">+</span><span class="s">&quot;, Size: &quot;</span> <span class="o">+</span> <span class="n">size</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">checkPositionIndex</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">isPositionIndex</span><span class="o">(</span><span class="n">index</span><span class="o">))</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IndexOutOfBoundsException</span><span class="o">(</span><span class="n">outOfBoundsMsg</span><span class="o">(</span><span class="n">index</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">PositionInfo</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">SinglyLinkedListNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">prev</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">SinglyLinkedListNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">cur</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="nf">PositionInfo</span><span class="o">(</span><span class="n">SinglyLinkedListNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">prev</span><span class="o">,</span> <span class="n">SinglyLinkedListNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">cur</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="n">prev</span><span class="o">;</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Returns the (non-null) Node at the specified element index.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">PositionInfo</span> <span class="nf">node</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">checkPositionIndex</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="k">new</span> <span class="n">PositionInfo</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">SinglyLinkedListNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">prev</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SinglyLinkedListNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;(</span><span class="kc">null</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="n">SinglyLinkedListNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">cur</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">index</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">prev</span> <span class="o">=</span> <span class="n">prev</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>            <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">PositionInfo</span><span class="o">(</span><span class="n">prev</span><span class="o">,</span> <span class="n">cur</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * @inheritDoc</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">ListIterator</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="nf">listIterator</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">checkPositionIndex</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">ListItr</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">ListItr</span> <span class="kd">implements</span> <span class="n">ListIterator</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">SinglyLinkedListNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">prev</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">SinglyLinkedListNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">cur</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kt">int</span> <span class="n">expectedModCount</span> <span class="o">=</span> <span class="n">modCount</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ListItr</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">assert</span> <span class="nf">isPositionIndex</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">PositionInfo</span> <span class="n">positionInfo</span> <span class="o">=</span> <span class="n">node</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class='line'>            <span class="n">prev</span> <span class="o">=</span> <span class="n">positionInfo</span><span class="o">.</span><span class="na">prev</span><span class="o">;</span>
</span><span class='line'>            <span class="n">cur</span> <span class="o">=</span> <span class="n">positionInfo</span><span class="o">.</span><span class="na">cur</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasNext</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">cur</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="n">E</span> <span class="nf">next</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">checkForComodification</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">hasNext</span><span class="o">())</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">NoSuchElementException</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">final</span> <span class="n">E</span> <span class="n">result</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
</span><span class='line'>            <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasPrevious</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="n">E</span> <span class="nf">previous</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">nextIndex</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">previousIndex</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">remove</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="n">E</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="n">E</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">checkForComodification</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">prev</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// empty list</span>
</span><span class='line'>                <span class="n">SinglyLinkedListNode</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">e</span><span class="o">;</span>
</span><span class='line'>                <span class="n">SinglyLinkedListNode</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>                <span class="n">cur</span> <span class="o">=</span> <span class="n">SinglyLinkedListNode</span><span class="o">.</span><span class="na">this</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">cur</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">// linkLast</span>
</span><span class='line'>                <span class="n">prev</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SinglyLinkedListNode</span><span class="o">&lt;&gt;(</span><span class="n">e</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">final</span> <span class="n">SinglyLinkedListNode</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">newNode</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SinglyLinkedListNode</span><span class="o">&lt;&gt;(</span><span class="n">e</span><span class="o">,</span> <span class="n">cur</span><span class="o">.</span><span class="na">next</span><span class="o">);</span>
</span><span class='line'>                <span class="n">cur</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">newNode</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">modCount</span><span class="o">++;</span>
</span><span class='line'>            <span class="n">expectedModCount</span><span class="o">++;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">void</span> <span class="nf">checkForComodification</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">modCount</span> <span class="o">!=</span> <span class="n">expectedModCount</span><span class="o">)</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ConcurrentModificationException</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then comes with the unit tests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">algorithmhub</span><span class="o">.</span><span class="na">customized_collection</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.fasterxml.jackson.core.type.TypeReference</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.ObjectMapper</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SinglyLinkedListTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span> <span class="kd">public</span> <span class="kt">void</span> <span class="n">singlyLinkedListTest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ObjectMapper</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">final</span> <span class="n">SinglyLinkedListNode</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">emptyList</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="s">&quot;[]&quot;</span><span class="o">,</span>
</span><span class='line'>            <span class="k">new</span> <span class="n">TypeReference</span><span class="o">&lt;</span><span class="n">SinglyLinkedListNode</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;()</span> <span class="o">{});</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">SinglyLinkedListNode</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">emptyListExpected</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SinglyLinkedListNode</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>        <span class="n">assertEquals</span><span class="o">(</span><span class="n">emptyListExpected</span><span class="o">,</span> <span class="n">emptyList</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// the time complexity is O(n)</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">SinglyLinkedListNode</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">intList</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="s">&quot;[1,2,3,4,5]&quot;</span><span class="o">,</span>
</span><span class='line'>            <span class="k">new</span> <span class="n">TypeReference</span><span class="o">&lt;</span><span class="n">SinglyLinkedListNode</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;()</span> <span class="o">{});</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">SinglyLinkedListNode</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">intListExpected</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SinglyLinkedListNode</span><span class="o">&lt;&gt;(</span><span class="mi">1</span><span class="o">,</span>
</span><span class='line'>            <span class="k">new</span> <span class="n">SinglyLinkedListNode</span><span class="o">&lt;&gt;(</span><span class="mi">2</span><span class="o">,</span>
</span><span class='line'>                <span class="k">new</span> <span class="n">SinglyLinkedListNode</span><span class="o">&lt;&gt;(</span><span class="mi">3</span><span class="o">,</span>
</span><span class='line'>                    <span class="k">new</span> <span class="n">SinglyLinkedListNode</span><span class="o">&lt;&gt;(</span><span class="mi">4</span><span class="o">,</span>
</span><span class='line'>                        <span class="k">new</span> <span class="n">SinglyLinkedListNode</span><span class="o">&lt;&gt;(</span><span class="mi">5</span><span class="o">,</span> <span class="kc">null</span><span class="o">)))));</span>
</span><span class='line'>        <span class="n">intListExpected</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SinglyLinkedListNode</span><span class="o">&lt;&gt;(</span><span class="mi">2</span><span class="o">,</span>
</span><span class='line'>            <span class="k">new</span> <span class="n">SinglyLinkedListNode</span><span class="o">&lt;&gt;(</span><span class="mi">3</span><span class="o">,</span>
</span><span class='line'>                <span class="k">new</span> <span class="n">SinglyLinkedListNode</span><span class="o">&lt;&gt;(</span><span class="mi">4</span><span class="o">,</span>
</span><span class='line'>                    <span class="k">new</span> <span class="n">SinglyLinkedListNode</span><span class="o">&lt;&gt;(</span><span class="mi">5</span><span class="o">,</span> <span class="kc">null</span><span class="o">))));</span>
</span><span class='line'>        <span class="n">assertEquals</span><span class="o">(</span><span class="n">intListExpected</span><span class="o">,</span> <span class="n">intList</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">final</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">SinglyLinkedListNode</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">arrayOfList</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="s">&quot;[[1,2,3], [4,5,6]]&quot;</span><span class="o">,</span>
</span><span class='line'>            <span class="k">new</span> <span class="n">TypeReference</span><span class="o">&lt;</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">SinglyLinkedListNode</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;&gt;()</span> <span class="o">{});</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">SinglyLinkedListNode</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">arrayOfListExpected</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span>
</span><span class='line'>            <span class="k">new</span> <span class="n">SinglyLinkedListNode</span><span class="o">&lt;&gt;(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">)),</span>
</span><span class='line'>            <span class="k">new</span> <span class="n">SinglyLinkedListNode</span><span class="o">&lt;&gt;(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">))));</span>
</span><span class='line'>        <span class="n">assertEquals</span><span class="o">(</span><span class="n">arrayOfListExpected</span><span class="o">,</span> <span class="n">arrayOfList</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Related Posts</h2>

<p><a href="http://www.soulmachine.me/blog/2015/06/22/deserialize-a-json-string-to-a-binary-tree/">Deserialize a JSON String to a Binary Tree</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debug Hadoop Applications With IntelliJ]]></title>
    <link href="http://www.soulmachine.me/blog/2015/01/30/debug-hadoop-applications-with-intellij/"/>
    <updated>2015-01-30T12:15:18-08:00</updated>
    <id>http://www.soulmachine.me/blog/2015/01/30/debug-hadoop-applications-with-intellij</id>
    <content type="html"><![CDATA[<p>In my previous blog, I explained how to <a href="http://www.soulmachine.me/blog/2015/01/29/create-a-hadoop-compilation-and-development-environment/">Create a Hadoop Compilation and Development Environment</a> so that you can build the Hadoop source code you get from the Apache Hadoop git repository.</p>

<p>However, not everyone need to dig into the source code, normally more people will just call the Hadoop APIs to write a MapReduce program. When you write a MapReduce program, you rarely get it right for one time, then you need to debug your code.</p>

<p>This time I&rsquo;ll show you how to debug your Hadoop applications using the IntelliJ IDE.</p>

<p><strong>Environment</strong>: CentOS 6.6, Oracle JDK 1.7.0_75, Maven 3.2.5, IntelliJ Idea 14.0.3</p>

<h2>1. Create a MapReduce Maven project</h2>

<p>First we need to create a MapReduce program to debug. Let&rsquo;s use the simplest example, WordCount, for demonstration.  The source code is here <a href="http://wiki.apache.org/hadoop/WordCount">WordCount &ndash; Hadoop Wiki</a>.</p>

<h3>1.1 Generate the Maven project</h3>

<p>Use the <code>mvn</code> command to generate the scaffolding for the project.</p>

<pre><code>mvn archetype:generate -DgroupId=me.soulmachine -DartifactId=wordcount -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
</code></pre>

<p>Delete the <code>src/test/java/me/soulmachine/AppTest.java</code> file, as it will not be used in this example, and rename the <code>src/main/java/me/soulmachine/App.java</code> file to <code>WordCount.java</code>.</p>

<!--more-->


<p>Now the structure of the project is as the following:</p>

<pre><code>tree ./wordcount
wordcount/
├── pom.xml
└── src
    ├── main
    │   └── java
    │       └── me
    │           └── soulmachine
    │               └── WordCount.java
    └── test
        └── java
            └── me
                └── soulmachine
</code></pre>

<h3>1.2 Write the code</h3>

<p>Rename the <code>src/main/java/me/soulmachine/App.java</code> file to <code>WordCount.java</code>, edit the file and copy and paste the code from <a href="http://wiki.apache.org/hadoop/WordCount">WordCount &ndash; Hadoop Wiki</a>, remember to change the first line from <code>package org.myorg</code> to <code>package me.soulmachine</code>.</p>

<p>I made some improvements to this code,  check it out:</p>

<div><script src='https://gist.github.com/a8130aa4983f2036b3bf.js?file=WordCount.java'></script>
<noscript><pre><code>package me.soulmachine;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

import java.io.IOException;
import java.util.StringTokenizer;


public class WordCount extends Configured implements Tool {

  public static class MyMapper extends Mapper&lt;LongWritable, Text, Text, IntWritable&gt; {
    private static final IntWritable ONE = new IntWritable(1);
    private final transient Text word = new Text();

    @Override
    public void map(final LongWritable key, final Text value, final Context context)
        throws IOException, InterruptedException {
      final String line = value.toString();
      final StringTokenizer tokenizer = new StringTokenizer(line);
      while (tokenizer.hasMoreTokens()) {
        word.set(tokenizer.nextToken());
        context.write(word, ONE);
      }
    }
  }


  public static class MyReducer extends Reducer&lt;Text, IntWritable, Text, IntWritable&gt; {

    @Override
    public void reduce(final Text key, final Iterable&lt;IntWritable&gt; values, final Context context)
        throws IOException, InterruptedException {
      int sum = 0;
      for (final IntWritable val : values) {
        sum += val.get();
      }
      context.write(key, new IntWritable(sum));
    }
  }


  @Override
  public int run(final String[] args) throws Exception {
    final Configuration conf = this.getConf();
    final Job job = Job.getInstance(conf, &quot;Word Count&quot;);
    job.setJarByClass(WordCount.class);

    job.setMapperClass(MyMapper.class);
    job.setReducerClass(MyReducer.class);

    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(NullWritable.class);
    job.setInputFormatClass(TextInputFormat.class);
    job.setOutputFormatClass(TextOutputFormat.class);

    FileInputFormat.addInputPath(job, new Path(args[0]));
    FileOutputFormat.setOutputPath(job, new Path(args[1]));

    return job.waitForCompletion(true) ? 0 : 1;
  }

  public static void main(final String[] args) throws Exception {
    final int returnCode = ToolRunner.run(new Configuration(), new WordCount(), args);
    System.exit(returnCode);
  }
}
</code></pre></noscript></div>


<h3>1.3 Edit the pom.xml file</h3>

<p>The content of the <code>pom.xml</code> file is as the following:</p>

<pre><code>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;me.soulmachine&lt;/groupId&gt;
  &lt;artifactId&gt;wordcount&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;name&gt;wordcount&lt;/name&gt;
  &lt;url&gt;http://maven.apache.org&lt;/url&gt;

  &lt;properties&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
    &lt;hadoop.version&gt;2.6.0&lt;/hadoop.version&gt;
  &lt;/properties&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;
      &lt;artifactId&gt;hadoop-client&lt;/artifactId&gt;
      &lt;version&gt;${hadoop.version}&lt;/version&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;

  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;
        &lt;configuration&gt;
          &lt;archive&gt;
            &lt;manifest&gt;
              &lt;mainClass&gt;me.soulmachine.WordCount&lt;/mainClass&gt;
            &lt;/manifest&gt;
          &lt;/archive&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/project&gt;
</code></pre>

<h3>1.4 Compile</h3>

<pre><code>mvn clean package
</code></pre>

<p>If this step succeeds, move to the next step.</p>

<h2>2. Debug WordCount in IntelliJ Idea</h2>

<h3>2.1 Open the project in IntelliJ Idea</h3>

<p>Launch IntelliJ Idea, click <code>File-&gt;Open</code> and open the <code>pom.xml</code>, thus you can import the project into IntelliJ Idea.</p>

<h3>2.2 Create a Run/Debug Configuration</h3>

<p>Select the project &ldquo;WordCount&rdquo;, Click menu <code>Run-&gt;Edit Configurations ...</code>,</p>

<ol>
<li>Click the button on the right of <code>Main Class</code> and select <code>me.soulmachine.WordCount</code> as the main class.</li>
<li>Set <code>Program Arguments</code> to <code>input/ output</code>, and create a directory named <code>input</code> in the project directory, no need to create the <code>output/</code> directory</li>
<li>Leave other fields as default.</li>
<li>Click <code>OK</code> and finish.</li>
</ol>


<p><img src="http://www.soulmachine.me/images/2015-01-29-intellij-debug-configuration.png"></p>

<h3>2.3 Run the program</h3>

<ol>
<li>Create a text file named <code>file1.txt</code> in the <code>input/</code> directory and set its content as <code>Hello World Bye World</code>, create another text file named <code>file2.txt</code> and set its content to <code>Hello Hadoop Goodbye Hadoop</code>.</li>
<li>Click menu <code>Run-&gt;Run 'Word Count'</code>, after it finishes, you will see a fold named <code>output/</code> in the project root directory and there are two files named <code>part-r-00000</code> and <code>_SUCCESS</code>.</li>
</ol>


<h3>2.4 Debug the program</h3>

<p>Set a break point in the <code>main</code> function and click menu <code>Run-&gt;Debug 'Word Count'</code>, then you can debug the code step by step.</p>

<h2>Reference</h2>

<ol>
<li><a href="http://vichargrave.com/debugging-hadoop-applications-with-intellij/">Debugging Hadoop Applications with IntelliJ | VicHargrave.com</a></li>
<li><a href="http://wiki.apache.org/hadoop/WordCount">WordCount &ndash; Hadoop Wiki</a></li>
<li><a href="http://maven.apache.org/guides/getting-started/maven-in-five-minutes.html">Maven in 5 Minutes</a></li>
<li><a href="http://azure.microsoft.com/nl-nl/documentation/articles/hdinsight-develop-deploy-java-mapreduce/">Develop Java MapReduce programs for Hadoop in HDInsight | Azure</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a Hadoop Compilation and Development Environment]]></title>
    <link href="http://www.soulmachine.me/blog/2015/01/29/create-a-hadoop-compilation-and-development-environment/"/>
    <updated>2015-01-29T11:56:41-08:00</updated>
    <id>http://www.soulmachine.me/blog/2015/01/29/create-a-hadoop-compilation-and-development-environment</id>
    <content type="html"><![CDATA[<p>If you want to read the source code of Hadoop and dig into the internals of Hadoop, then you need to know how to compile the source code and use IDEs (such as Eclipse or IntelliJ Idea) to open the projects. This blog will introduce you how to create a Hadoop build and development environment.</p>

<p><strong>Environment</strong>: CentOS 6.6,  Oracle JDK 1.7.0_75</p>

<h2>1. Install Oracle JDK 7</h2>

<pre><code>Download jdk-7u75-linux-x64.rpm
sudo yum localinstall -y ./jdk-7u75-linux-x64.rpm
</code></pre>

<p>For now if you use JDK 8 to compile the source code of Hadoop, it will fail because the javadoc  in Java 8 is considerably more strict than the one in earlier version, see more detailes <a href="http://blog.joda.org/2014/02/turning-off-doclint-in-jdk-8-javadoc.html">here</a></p>

<h2>2. Install Maven</h2>

<pre><code>wget http://mirrors.gigenet.com/apache/maven/maven-3/3.2.5/binaries/apache-maven-3.2.5-bin.tar.gz
sudo tar -zxf apache-maven-3.2.5-bin.tar.gz -C /opt
sudo vim /etc/profile
export M2_HOME=/opt/apache-maven-3.2.5
export PATH=$M2_HOME/bin:$PATH
</code></pre>

<h2>3. Install FindBugs(Optional)</h2>

<pre><code>wget http://iweb.dl.sourceforge.net/project/findbugs/findbugs/3.0.0/findbugs-3.0.0.tar.gz
sudo tar -zxf findbugs-3.0.0.tar.gz -C /opt
sudo vim /etc/profile
export FB_HOME=/opt/findbugs-3.0.0
export PATH=$FB_HOME/bin:$PATH
</code></pre>

<p>If you want to run <code>mvn compile findbugs:findbugs</code> then you need to install FindBugs.</p>

<!-- more -->


<h2>4. Install build tools</h2>

<pre><code>sudo yum install -y gcc-c++ cmake autoconf automake
</code></pre>

<h2>5. Install native libraries packages</h2>

<pre><code>sudo yum -y install  gcc-c++ lzo-devel  zlib-devel libtool openssl-devel
</code></pre>

<p>Optional:</p>

<pre><code>sudo yum install -y snappy-devel
sudo yum install -y svn
</code></pre>

<p>During the process of compilation, it will throw out some warning messages if there is no <code>svn</code> command.</p>

<h2>5. Install Protobuf</h2>

<pre><code>wget https://protobuf.googlecode.com/files/protobuf-2.5.0.tar.gz
tar -zxf protobuf-2.5.0.tar.gz
cd protobuf-2.5.0
./configure
make
sudo make install
rm -rf ./protobuf-2.5.0
rm ./protobuf-2.5.0.tar.gz
</code></pre>

<p><strong>NOTE</strong>: The Protobuf version must be exactly 2.5.0, or the compilation will fail.</p>

<h2>6. Download the source code</h2>

<pre><code>git clone git@github.com:apache/hadoop.git
</code></pre>

<h2>7. Compile</h2>

<p>Create binary distribution with native code and without documentation.</p>

<pre><code>mvn clean package -Pdist,native -Dtar -DskipTests -Drequire.snappy -Drequire.openssl
</code></pre>

<h2>8. Install IntelliJ Idea</h2>

<pre><code>wget http://download-cf.jetbrains.com/idea/ideaIC-14.0.3.tar.gz
sudo tar -zxf ideaIC-14.0.3.tar.gz -C /opt
Launch IntelliJ Idea, Create Desktop Entry
</code></pre>

<h2>9. Open projects in IntelliJ Idea</h2>

<p>First you need to run</p>

<pre><code>mvn install -DskipTests
</code></pre>

<p>Since some submodules of Hadoop depend on other submodules,  so you need to run <code>mvn install -DskipTests</code> to copy jars of Hadoop submodules to local <code>$HOME/.m2</code> , so that Maven won&rsquo;t download them from Internet. If you omit this step, Maven will try to download them from public Maven repository and will fail, because the newest version of Hadoop jars are not available in public Maven repository yet.</p>

<p>Then click <code>File-&gt;Open</code> to open the <code>pom.xml</code> in the root directory of Hadoop repo.</p>

<p><strong>Note</strong>: Don&rsquo;t use <code>mvn idea:idea</code> to generate IntelliJ Idea projects first , IntelliJ Idea can handle pom.xml quite well, besides, the <a href="http://maven.apache.org/plugins/maven-idea-plugin/">&ldquo;Maven IDEA Plugin&rdquo;</a> has already RETIRED.</p>

<h2>10. Increase the memory for IntelliJ Idea(Optional)</h2>

<p>There are many classes in Hadoop source code, if your IntelliJ hangs and doesn&rsquo;t respond from time to time, then you can try to give more memory to IntelliJ Idea by modifying the file <code>idea64.vmoptions</code> in the installation directory. Example below:</p>

<pre><code>-Xms128m
-Xmx4096m
-XX:MaxPermSize=1024m
</code></pre>

<h2>Reference</h2>

<ol>
<li><a href="http://wiki.apache.org/hadoop/HowToContribute">HowToContribute</a></li>
<li><a href="https://github.com/apache/hadoop/blob/trunk/BUILDING.txt">BUILDING.txt</a></li>
<li><a href="http://vichargrave.com/create-a-hadoop-build-and-development-environment-for-hadoop/">Create a Hadoop Build and Development Environment</a></li>
<li><a href="http://blog.cloudera.com/blog/2014/06/how-to-create-an-intellij-idea-project-for-apache-hadoop/">How-to: Create an IntelliJ IDEA Project for Apache Hadoop</a></li>
</ol>


<p>In my next blog, I&rsquo;ll explain how to <a href="http://www.soulmachine.me/blog/2015/01/30/debug-hadoop-applications-with-intellij/">Debug Hadoop Applications with IntelliJ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Code Style and Static Analysis]]></title>
    <link href="http://www.soulmachine.me/blog/2014/12/15/java-code-style-and-static-analysis/"/>
    <updated>2014-12-15T11:42:09-08:00</updated>
    <id>http://www.soulmachine.me/blog/2014/12/15/java-code-style-and-static-analysis</id>
    <content type="html"><![CDATA[<h2>1. Checkstyle</h2>

<p><a href="http://checkstyle.sourceforge.net/">CheckStyle</a> is a development tool to help programmers write Java code that adheres to a coding standard. It automates the process of checking Java code to spare humans of this boring (but important) task. This makes it ideal for projects that want to enforce a coding standard.</p>

<p>Which Java code style to choose? Google has published a few coding standards, include <a href="http://google-styleguide.googlecode.com/svn/trunk/javaguide.html">Google Java Style</a>. Aditionally, there are xml configuration files for Eclipse and IntelliJ in the SVN repository, <a href="https://code.google.com/p/google-styleguide/source/browse/trunk">https://code.google.com/p/google-styleguide/source/browse/trunk</a>.</p>

<p>Checkstyle Eclipse plugin has already used Google Java style by default, checkt it by clicking &ldquo;Window->Preferences->Checkstyle->Global Check Configurations&rdquo;, or at <a href="https://github.com/checkstyle/checkstyle/blob/master/google_checks.xml">https://github.com/checkstyle/checkstyle/blob/master/google_checks.xml</a>.</p>

<h3>1.1 Checkstyle Eclipse Plugin</h3>

<p>To check your coding style automatically in Eclipse, just install the Checkstyle Eclpise plugin. Launch Eclipse, click Menu &ldquo;Help &ndash;> Install New Software&rdquo;, input
<a href="http://eclipse-cs.sf.net/update/">http://eclipse-cs.sf.net/update/</a>, then click &ldquo;Next&rdquo; to install the plugin.</p>

<h3>1.2 Checkstyle Maven Plugin</h3>

<p>Add the following lines to pom.xml to enable Checkstyle:</p>

<pre><code>&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-checkstyle-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.13&lt;/version&gt;
            &lt;dependencies&gt;
                &lt;dependency&gt;
                    &lt;groupId&gt;com.puppycrawl.tools&lt;/groupId&gt;
                    &lt;artifactId&gt;checkstyle&lt;/artifactId&gt;
                    &lt;version&gt;6.1.1&lt;/version&gt;
                &lt;/dependency&gt;
            &lt;/dependencies&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;checkstyle&lt;/id&gt;
                    &lt;phase&gt;validate&lt;/phase&gt;
                    &lt;configuration&gt;
                        &lt;configLocation&gt;google_checks.xml&lt;/configLocation&gt;
                        &lt;encoding&gt;UTF-8&lt;/encoding&gt;
                        &lt;consoleOutput&gt;true&lt;/consoleOutput&gt;
                        &lt;failsOnError&gt;true&lt;/failsOnError&gt;
                        &lt;includeTestSourceDirectory&gt;true&lt;/includeTestSourceDirectory&gt;
                    &lt;/configuration&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;checkstyle&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
&lt;reporting&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-checkstyle-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.13&lt;/version&gt;
            &lt;configuration&gt;
                &lt;configLocation&gt;https://raw.githubusercontent.com/checkstyle/checkstyle/master/google_checks.xml&lt;/configLocation&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-jxr-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.5&lt;/version&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/reporting&gt;
</code></pre>

<!-- more -->


<h2>1.3 Maven Eclipse Plugin</h2>

<p>To format source code automatically according to Google Java style, import the file <a href="https://google-styleguide.googlecode.com/svn/trunk/eclipse-java-google-style.xml">eclipse-java-google-style.xml</a> into Eclipse by clicking menu &ldquo;Window->Preferences->Java->Code Style->Formatter->Import&rdquo;.</p>

<p>You can add the code style automatically via Maven, add the following lines to pom.xml:</p>

<pre><code>&lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-eclipse-plugin&lt;/artifactId&gt;
    &lt;version&gt;2.9&lt;/version&gt;
    &lt;configuration&gt;
        &lt;downloadSources&gt;true&lt;/downloadSources&gt;
        &lt;downloadJavadocs&gt;true&lt;/downloadJavadocs&gt;
        &lt;workspace&gt;${basedir}&lt;/workspace&gt;
        &lt;workspaceCodeStylesURL&gt;https://google-styleguide.googlecode.com/svn/trunk/eclipse-java-google-style.xml&lt;/workspaceCodeStylesURL&gt;
    &lt;/configuration&gt;
&lt;/plugin&gt;
</code></pre>

<h2>2 PMD</h2>

<p>Checking code style is not enough, there are many static anaylysis tools which can analyze your code and find potential bugs, for example PMD, findbugs, etc. The difference between them is <a href="http://www.sw-engineering-candies.com/blog-1/comparison-of-findbugs-pmd-and-checkstyle">http://www.sw-engineering-candies.com/blog-1/comparison-of-findbugs-pmd-and-checkstyle</a>.</p>

<p><a href="http://pmd.sourceforge.net/">PMD</a> is a source code analyzer. It finds common programming flaws like unused variables, empty catch blocks, unnecessary object creation, and so forth.</p>

<h3>2.1 PMD Eclipse Plugin</h3>

<p>PMD Eclipse plugin update site:
<a href="http://sourceforge.net/projects/pmd/files/pmd-eclipse/update-site/">http://sourceforge.net/projects/pmd/files/pmd-eclipse/update-site/</a>.</p>

<h3>2.2 Maven PMD Plugin</h3>

<p>To enable automatically static analysis during compilation, add the following lines to pom.xml:</p>

<pre><code>&lt;build&gt;
    &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-pmd-plugin&lt;/artifactId&gt;
        &lt;version&gt;3.3&lt;/version&gt;
        &lt;executions&gt;
            &lt;execution&gt;
                &lt;phase&gt;validate&lt;/phase&gt;
                &lt;goals&gt;
                    &lt;goal&gt;check&lt;/goal&gt;
                    &lt;goal&gt;cpd-check&lt;/goal&gt;
                &lt;/goals&gt;
            &lt;/execution&gt;
        &lt;/executions&gt;
    &lt;/plugin&gt;
&lt;/build&gt;
&lt;reporting&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;artifactId&gt;maven-pmd-plugin&lt;/artifactId&gt;
            &lt;version&gt;3.3&lt;/version&gt;
            &lt;reportSets&gt;
                &lt;reportSet&gt;
                    &lt;reports&gt;
                        &lt;report&gt;pmd&lt;/report&gt;
                        &lt;report&gt;cpd&lt;/report&gt;
                    &lt;/reports&gt;
                &lt;/reportSet&gt;
            &lt;/reportSets&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/reporting&gt;
</code></pre>

<h2>3. FindBugs</h2>

<h3>3.1 FindBugs Eclipse Plugin</h3>

<p>Eclipse Update Site: <a href="http://findbugs.cs.umd.edu/eclipse">http://findbugs.cs.umd.edu/eclipse</a></p>

<h3>3.2 Maven FindBugs Plugin</h3>

<p>Official site: <a href="http://mojo.codehaus.org/findbugs-maven-plugin/">http://mojo.codehaus.org/findbugs-maven-plugin/</a></p>

<p>To configure your build to fail if any errors are found in the FindBugs report, add the following lines to pom.xml.</p>

<pre><code>&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
            &lt;artifactId&gt;findbugs-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;3.0.1-SNAPSHOT&lt;/version&gt;
            &lt;configuration&gt;
                &lt;effort&gt;Max&lt;/effort&gt;
                &lt;threshold&gt;Low&lt;/threshold&gt;
                &lt;xmlOutput&gt;true&lt;/xmlOutput&gt;
            &lt;/configuration&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;check&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
</code></pre>

<p>Reference: <a href="http://mojo.codehaus.org/findbugs-maven-plugin/examples/violationChecking.html">http://mojo.codehaus.org/findbugs-maven-plugin/examples/violationChecking.html</a></p>

<h2>4. What&rsquo;s next?</h2>

<p>Nowadays there are many tools that are more powerful and automatic, for example, <a href="http://www.sonarqube.org/">SonarQube</a>, <a href="http://www.coverity.com/">Coverity</a>. SonarQube is an open source quality management platform, dedicated to continuously analyze and measure source code quality, and has been used by <a href="http://zeroturnaround.com/rebellabs/developers-guide-static-code-analysis-findbugs-checkstyle-pmd-coverity-sonarqube/">many companies</a>, I will try it in the next step.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Restore Octopress at a New Computer]]></title>
    <link href="http://www.soulmachine.me/blog/2014/01/28/restore-octopress-at-a-new-computer/"/>
    <updated>2014-01-28T00:04:00-08:00</updated>
    <id>http://www.soulmachine.me/blog/2014/01/28/restore-octopress-at-a-new-computer</id>
    <content type="html"><![CDATA[<p>OS: Ubuntu 12.04 64-bit</p>

<h2>1. Install ruby</h2>

<h3>1.1 Install ruby via RVM</h3>

<pre><code>$ \curl -sSL https://get.rvm.io | bash -s stable --ruby
</code></pre>

<h3>1.2 <a href="https://rvm.io/integration/gnome-terminal">Integrating RVM with gnome-terminal</a></h3>

<p><code>/etc/profile</code>, <code>~/.bash_profile</code> are for login shell, and <code>~/.bashrc</code> is for interactive shell, and RVM&rsquo;s path is added to <code>~/.bash_profile</code>, so you need to set the shell as a login shell.</p>

<h3>1.3 Give it a try</h3>

<p>Exit current shell, and open a new shell,</p>

<pre><code>ruby -v
</code></pre>

<p>You have successfully installed ruby.</p>

<h2>2. Install Python</h2>

<pre><code>$ sudo apt-get install -y python
</code></pre>

<p>Because <a href="http://pygments.org/">Pygments</a> syntax highlighting needs Python.</p>

<h2>3. Clone your blog to the new machine</h2>

<p>First you need to clone the <code>source</code> branch to the local octopress folder.</p>

<pre><code>$ git clone -b source git@github.com:username/username.github.com.git octopress
</code></pre>

<!-- more -->


<p>Then clone the <code>master</code> branch to the <code>_deploy</code> subfolder.</p>

<pre><code>$ cd octopress
$ git clone git@github.com:username/username.github.com.git _deploy 
</code></pre>

<p>Then run the rake installation to configure everything</p>

<pre><code>$ gem install bundler
$ bundle install
</code></pre>

<p>NOW you&rsquo;ve setup with a new local copy of your Octopress blog.</p>

<p>You don&rsquo;t need to run <code>rake setup_github_pages</code> any more.</p>

<h2>4. Blogging at more than one computer</h2>

<h3>4.1 Pushing changes</h3>

<p>If you want to blog at more than one computer, you need to make sure that you push everything before switching computers. From the first machine do the following whenever you’ve made changes:</p>

<pre><code>$ rake new_post["hello world"] 
$ rake generate
$ rake deploy
</code></pre>

<p>This will generate your blog, copy the generated files into <code>_deploy/</code>, add them to git, commit and push them up to the master branch, see <a href="http://octopress.org/docs/deploying/github/">Deploying to Github Pages</a>.
Don&rsquo;t forget to commit the source for your blog.</p>

<pre><code>$ git add .
$ git commit -am "Some comment here." 
$ git push origin source  # update the remote source branch 
</code></pre>

<h3>4.2 Pull changes at another computer</h3>

<pre><code>$ cd octopress
$ git pull origin source  # update the local source branch
$ cd ./_deploy
$ git pull origin master  # update the local master branch
</code></pre>

<h2>Reference</h2>

<p><a href="http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/">Clone Your Octopress to Blog From Two Places</a></p>
]]></content>
  </entry>
  
</feed>
