<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[soulmachine]]></title>
  <link href="http://www.soulmachine.me/atom.xml" rel="self"/>
  <link href="http://www.soulmachine.me/"/>
  <updated>2015-01-29T12:25:28-08:00</updated>
  <id>http://www.soulmachine.me/</id>
  <author>
    <name><![CDATA[soulmachine]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Debug Hadoop Applications With IntelliJ]]></title>
    <link href="http://www.soulmachine.me/blog/2015/01/30/debug-hadoop-applications-with-intellij/"/>
    <updated>2015-01-30T12:15:18-08:00</updated>
    <id>http://www.soulmachine.me/blog/2015/01/30/debug-hadoop-applications-with-intellij</id>
    <content type="html"><![CDATA[<p>In my previous blog, I explained how to <a href="http://172.16.254.165:4000/blog/2015/01/29/create-a-hadoop-compilation-and-development-environment/">Create a Hadoop Compilation and Development Environment</a> so that you can build the Hadoop source code you get from the Apache Hadoop git repository.</p>

<p>However, not everyone need to dig into the source code, normally more people will just call the Hadoop APIs to write a MapReduce program. When you write a MapReduce program, you rarely get it right for one time, then you need to debug your code.</p>

<p>This time I&rsquo;ll show you how to debug your Hadoop applications using the IntelliJ IDE.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a Hadoop Compilation and Development Environment]]></title>
    <link href="http://www.soulmachine.me/blog/2015/01/29/create-a-hadoop-compilation-and-development-environment/"/>
    <updated>2015-01-29T11:56:41-08:00</updated>
    <id>http://www.soulmachine.me/blog/2015/01/29/create-a-hadoop-compilation-and-development-environment</id>
    <content type="html"><![CDATA[<p>If you want to read the source code of Hadoop and dig into the internals of Hadoop, then you need to know how to compile the source code and use IDEs (such as Eclipse or IntelliJ Idea) to open the projects. This blog will introduce you how to create a Hadoop build and development environment.</p>

<p><strong>Environment</strong>: CentOS 6.6,  Oracle JDK 1.7.0_75</p>

<h2>1. Install Oracle JDK 7</h2>

<pre><code>Download jdk-7u75-linux-x64.rpm
sudo yum localinstall -y ./jdk-7u75-linux-x64.rpm
</code></pre>

<p>For now if you use JDK 8 to compile the source code of Hadoop, it will fail because the javadoc  in Java 8 is considerably more strict than the one in earlier version, see more detailes <a href="http://blog.joda.org/2014/02/turning-off-doclint-in-jdk-8-javadoc.html">here</a></p>

<h2>2. Install Maven</h2>

<pre><code>wget http://mirrors.gigenet.com/apache/maven/maven-3/3.2.5/binaries/apache-maven-3.2.5-bin.tar.gz
sudo tar -zxf apache-maven-3.2.5-bin.tar.gz -C /opt
sudo vim /etc/profile
export M2_HOME=/opt/apache-maven-3.2.5
export PATH=$M2_HOME/bin:$PATH
</code></pre>

<h2>3. Install FindBugs(Optional)</h2>

<pre><code>wget http://iweb.dl.sourceforge.net/project/findbugs/findbugs/3.0.0/findbugs-3.0.0.tar.gz
sudo tar -zxf findbugs-3.0.0.tar.gz -C /opt
sudo vim /etc/profile
export FB_HOME=/opt/findbugs-3.0.0
export PATH=$FB_HOME/bin:$PATH
</code></pre>

<p>If you want to run <code>mvn compile findbugs:findbugs</code> then you need to install FindBugs.</p>

<!-- more -->


<h2>4. Install build tools</h2>

<pre><code>sudo yum install -y gcc-c++ cmake autoconf automake
</code></pre>

<h2>5. Install native libraries packages</h2>

<pre><code>sudo yum -y install  gcc-c++ lzo-devel  zlib-devel libtool openssl-devel
</code></pre>

<p>Optional:</p>

<pre><code>sudo yum install -y snappy-devel
sudo yum install -y svn
</code></pre>

<p>During the process of compilation, it will throw out some warning messages if there is no <code>svn</code> command.</p>

<h2>5. Install Protobuf</h2>

<pre><code>wget https://protobuf.googlecode.com/files/protobuf-2.5.0.tar.gz
tar -zxf protobuf-2.5.0.tar.gz
cd protobuf-2.5.0
./configure
make
sudo make install
rm -rf ./protobuf-2.5.0
rm ./protobuf-2.5.0.tar.gz
</code></pre>

<p><strong>NOTE</strong>: The Protobuf version must be exactly 2.5.0, or the compilation will fail.</p>

<h2>6. Download the source code</h2>

<pre><code>git clone git@github.com:apache/hadoop.git
</code></pre>

<h2>7. Compile</h2>

<p>Create binary distribution with native code and without documentation.</p>

<pre><code>mvn clean package -Pdist,native -Dtar -DskipTests -Drequire.snappy -Drequire.openssl
</code></pre>

<h2>8. Install IntelliJ Idea</h2>

<pre><code>wget http://download-cf.jetbrains.com/idea/ideaIC-14.0.3.tar.gz
sudo tar -zxf ideaIC-14.0.3.tar.gz -C /opt
Launch IntelliJ Idea, Create Desktop Entry
</code></pre>

<h2>9. Open projects in IntelliJ Idea</h2>

<p>First you need to run</p>

<pre><code>mvn install -DskipTests
</code></pre>

<p>Since some submodules of Hadoop depend on other submodules,  so you need to run <code>mvn install -DskipTests</code> to copy jars of Hadoop submodules to local <code>$HOME/.m2</code> , so that Maven won&rsquo;t download them from Internet. If you omit this step, Maven will try to download them from public Maven repository and will fail, because the newest version of Hadoop jars are not available in public Maven repository yet.</p>

<p>Then click <code>File-&gt;Open</code> to open the <code>pom.xml</code> in the root directory of Hadoop repo.</p>

<p><strong>Note</strong>: Don&rsquo;t use <code>mvn idea:idea</code> to generate IntelliJ Idea projects first , IntelliJ Idea can handle pom.xml quite well, besides, the <a href="http://maven.apache.org/plugins/maven-idea-plugin/">&ldquo;Maven IDEA Plugin&rdquo;</a> has already RETIRED.</p>

<h2>10. Increase the memory for IntelliJ Idea(Optional)</h2>

<p>There are many classes in Hadoop source code, if your IntelliJ hangs and doesn&rsquo;t respond from time to time, then you can try to give more memory to IntelliJ Idea by modifying the file <code>idea64.vmoptions</code> in the installation directory. Example below:</p>

<pre><code>-Xms128m
-Xmx4096m
-XX:MaxPermSize=1024m
</code></pre>

<h2>Reference</h2>

<ol>
<li><a href="http://wiki.apache.org/hadoop/HowToContribute">HowToContribute</a></li>
<li><a href="https://github.com/apache/hadoop/blob/trunk/BUILDING.txt">BUILDING.txt</a></li>
<li><a href="http://vichargrave.com/create-a-hadoop-build-and-development-environment-for-hadoop/">Create a Hadoop Build and Development Environment</a></li>
<li><a href="http://blog.cloudera.com/blog/2014/06/how-to-create-an-intellij-idea-project-for-apache-hadoop/">How-to: Create an IntelliJ IDEA Project for Apache Hadoop</a></li>
</ol>


<p>In my next blog, I&rsquo;ll explain how to <a href="http://172.16.254.165:4000/blog/2015/01/30/debug-hadoop-applications-with-intellij/">Debug Hadoop Applications with IntelliJ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Code Style and Static Analysis]]></title>
    <link href="http://www.soulmachine.me/blog/2014/12/15/java-code-style-and-static-analysis/"/>
    <updated>2014-12-15T11:42:09-08:00</updated>
    <id>http://www.soulmachine.me/blog/2014/12/15/java-code-style-and-static-analysis</id>
    <content type="html"><![CDATA[<h2>1. Checkstyle</h2>

<p><a href="http://checkstyle.sourceforge.net/">CheckStyle</a> is a development tool to help programmers write Java code that adheres to a coding standard. It automates the process of checking Java code to spare humans of this boring (but important) task. This makes it ideal for projects that want to enforce a coding standard.</p>

<p>Which Java code style to choose? Google has published a few coding standards, include <a href="http://google-styleguide.googlecode.com/svn/trunk/javaguide.html">Google Java Style</a>. Aditionally, there are xml configuration files for Eclipse and IntelliJ in the SVN repository, <a href="https://code.google.com/p/google-styleguide/source/browse/trunk">https://code.google.com/p/google-styleguide/source/browse/trunk</a>.</p>

<p>Checkstyle Eclipse plugin has already used Google Java style by default, checkt it by clicking &ldquo;Window->Preferences->Checkstyle->Global Check Configurations&rdquo;, or at <a href="https://github.com/checkstyle/checkstyle/blob/master/google_checks.xml">https://github.com/checkstyle/checkstyle/blob/master/google_checks.xml</a>.</p>

<h3>1.1 Checkstyle Eclipse Plugin</h3>

<p>To check your coding style automatically in Eclipse, just install the Checkstyle Eclpise plugin. Launch Eclipse, click Menu &ldquo;Help &ndash;> Install New Software&rdquo;, input
<a href="http://eclipse-cs.sf.net/update/">http://eclipse-cs.sf.net/update/</a>, then click &ldquo;Next&rdquo; to install the plugin.</p>

<h3>1.2 Checkstyle Maven Plugin</h3>

<p>Add the following lines to pom.xml to enable Checkstyle:</p>

<pre><code>&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-checkstyle-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.13&lt;/version&gt;
            &lt;dependencies&gt;
                &lt;dependency&gt;
                    &lt;groupId&gt;com.puppycrawl.tools&lt;/groupId&gt;
                    &lt;artifactId&gt;checkstyle&lt;/artifactId&gt;
                    &lt;version&gt;6.1.1&lt;/version&gt;
                &lt;/dependency&gt;
            &lt;/dependencies&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;checkstyle&lt;/id&gt;
                    &lt;phase&gt;validate&lt;/phase&gt;
                    &lt;configuration&gt;
                        &lt;configLocation&gt;google_checks.xml&lt;/configLocation&gt;
                        &lt;encoding&gt;UTF-8&lt;/encoding&gt;
                        &lt;consoleOutput&gt;true&lt;/consoleOutput&gt;
                        &lt;failsOnError&gt;true&lt;/failsOnError&gt;
                        &lt;includeTestSourceDirectory&gt;true&lt;/includeTestSourceDirectory&gt;
                    &lt;/configuration&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;checkstyle&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
&lt;reporting&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-checkstyle-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.13&lt;/version&gt;
            &lt;configuration&gt;
                &lt;configLocation&gt;https://raw.githubusercontent.com/checkstyle/checkstyle/master/google_checks.xml&lt;/configLocation&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-jxr-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.5&lt;/version&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/reporting&gt;
</code></pre>

<!-- more -->


<h2>1.3 Maven Eclipse Plugin</h2>

<p>To format source code automatically according to Google Java style, import the file <a href="https://google-styleguide.googlecode.com/svn/trunk/eclipse-java-google-style.xml">eclipse-java-google-style.xml</a> into Eclipse by clicking menu &ldquo;Window->Preferences->Java->Code Style->Formatter->Import&rdquo;.</p>

<p>You can add the code style automatically via Maven, add the following lines to pom.xml:</p>

<pre><code>&lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-eclipse-plugin&lt;/artifactId&gt;
    &lt;version&gt;2.9&lt;/version&gt;
    &lt;configuration&gt;
        &lt;downloadSources&gt;true&lt;/downloadSources&gt;
        &lt;downloadJavadocs&gt;true&lt;/downloadJavadocs&gt;
        &lt;workspace&gt;${basedir}&lt;/workspace&gt;
        &lt;workspaceCodeStylesURL&gt;https://google-styleguide.googlecode.com/svn/trunk/eclipse-java-google-style.xml&lt;/workspaceCodeStylesURL&gt;
    &lt;/configuration&gt;
&lt;/plugin&gt;
</code></pre>

<h2>2 PMD</h2>

<p>Checking code style is not enough, there are many static anaylysis tools which can analyze your code and find potential bugs, for example PMD, findbugs, etc. The difference between them is <a href="http://www.sw-engineering-candies.com/blog-1/comparison-of-findbugs-pmd-and-checkstyle">http://www.sw-engineering-candies.com/blog-1/comparison-of-findbugs-pmd-and-checkstyle</a>.</p>

<p><a href="http://pmd.sourceforge.net/">PMD</a> is a source code analyzer. It finds common programming flaws like unused variables, empty catch blocks, unnecessary object creation, and so forth.</p>

<h3>2.1 PMD Eclipse Plugin</h3>

<p>PMD Eclipse plugin update site:
<a href="http://sourceforge.net/projects/pmd/files/pmd-eclipse/update-site/">http://sourceforge.net/projects/pmd/files/pmd-eclipse/update-site/</a>.</p>

<h3>2.2 Maven PMD Plugin</h3>

<p>To enable automatically static analysis during compilation, add the following lines to pom.xml:</p>

<pre><code>&lt;build&gt;
    &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-pmd-plugin&lt;/artifactId&gt;
        &lt;version&gt;3.3&lt;/version&gt;
        &lt;executions&gt;
            &lt;execution&gt;
                &lt;phase&gt;validate&lt;/phase&gt;
                &lt;goals&gt;
                    &lt;goal&gt;check&lt;/goal&gt;
                    &lt;goal&gt;cpd-check&lt;/goal&gt;
                &lt;/goals&gt;
            &lt;/execution&gt;
        &lt;/executions&gt;
    &lt;/plugin&gt;
&lt;/build&gt;
&lt;reporting&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;artifactId&gt;maven-pmd-plugin&lt;/artifactId&gt;
            &lt;version&gt;3.3&lt;/version&gt;
            &lt;reportSets&gt;
                &lt;reportSet&gt;
                    &lt;reports&gt;
                        &lt;report&gt;pmd&lt;/report&gt;
                        &lt;report&gt;cpd&lt;/report&gt;
                    &lt;/reports&gt;
                &lt;/reportSet&gt;
            &lt;/reportSets&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/reporting&gt;
</code></pre>

<h2>3. FindBugs</h2>

<h3>3.1 FindBugs Eclipse Plugin</h3>

<p>Eclipse Update Site: <a href="http://findbugs.cs.umd.edu/eclipse">http://findbugs.cs.umd.edu/eclipse</a></p>

<h3>3.2 Maven FindBugs Plugin</h3>

<p>Official site: <a href="http://mojo.codehaus.org/findbugs-maven-plugin/">http://mojo.codehaus.org/findbugs-maven-plugin/</a></p>

<p>To configure your build to fail if any errors are found in the FindBugs report, add the following lines to pom.xml.</p>

<pre><code>&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
            &lt;artifactId&gt;findbugs-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;3.0.1-SNAPSHOT&lt;/version&gt;
            &lt;configuration&gt;
                &lt;effort&gt;Max&lt;/effort&gt;
                &lt;threshold&gt;Low&lt;/threshold&gt;
                &lt;xmlOutput&gt;true&lt;/xmlOutput&gt;
            &lt;/configuration&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;check&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
</code></pre>

<p>Reference: <a href="http://mojo.codehaus.org/findbugs-maven-plugin/examples/violationChecking.html">http://mojo.codehaus.org/findbugs-maven-plugin/examples/violationChecking.html</a></p>

<h2>4. What&rsquo;s next?</h2>

<p>Nowadays there are many tools that are more powerful and automatic, for example, <a href="http://www.sonarqube.org/">SonarQube</a>, <a href="http://www.coverity.com/">Coverity</a>. SonarQube is an open source quality management platform, dedicated to continuously analyze and measure source code quality, and has been used by <a href="http://zeroturnaround.com/rebellabs/developers-guide-static-code-analysis-findbugs-checkstyle-pmd-coverity-sonarqube/">many companies</a>, I will try it in the next step.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Restore Octopress at a New Computer]]></title>
    <link href="http://www.soulmachine.me/blog/2014/01/28/restore-octopress-at-a-new-computer/"/>
    <updated>2014-01-28T00:04:00-08:00</updated>
    <id>http://www.soulmachine.me/blog/2014/01/28/restore-octopress-at-a-new-computer</id>
    <content type="html"><![CDATA[<p>OS: Ubuntu 12.04 64-bit</p>

<h2>1. Install ruby</h2>

<h3>1.1 Install ruby via RVM</h3>

<pre><code>$ \curl -sSL https://get.rvm.io | bash -s stable --ruby
</code></pre>

<h3>1.2 <a href="https://rvm.io/integration/gnome-terminal">Integrating RVM with gnome-terminal</a></h3>

<p><code>/etc/profile</code>, <code>~/.bash_profile</code> are for login shell, and <code>~/.bashrc</code> is for interactive shell, and RVM&rsquo;s path is added to <code>~/.bash_profile</code>, so you need to set the shell as a login shell.</p>

<h3>1.3 Give it a try</h3>

<p>Exit current shell, and open a new shell,</p>

<pre><code>ruby -v
</code></pre>

<p>You have successfully installed ruby.</p>

<h2>2. Install Python</h2>

<pre><code>$ sudo apt-get install -y python
</code></pre>

<p>Because <a href="http://pygments.org/">Pygments</a> syntax highlighting needs Python.</p>

<h2>3. Clone your blog to the new machine</h2>

<p>First you need to clone the <code>source</code> branch to the local octopress folder.</p>

<pre><code>$ git clone -b source git@github.com:username/username.github.com.git octopress
</code></pre>

<!-- more -->


<p>Then clone the <code>master</code> branch to the <code>_deploy</code> subfolder.</p>

<pre><code>$ cd octopress
$ git clone git@github.com:username/username.github.com.git _deploy 
</code></pre>

<p>Then run the rake installation to configure everything</p>

<pre><code>$ gem install bundler
$ bundle install
</code></pre>

<p>NOW you&rsquo;ve setup with a new local copy of your Octopress blog.</p>

<p>You don&rsquo;t need to run <code>rake setup_github_pages</code> any more.</p>

<h2>4. Blogging at more than one computer</h2>

<h3>4.1 Pushing changes</h3>

<p>If you want to blog at more than one computer, you need to make sure that you push everything before switching computers. From the first machine do the following whenever you’ve made changes:</p>

<pre><code>$ rake new_post["hello world"] 
$ rake generate
$ rake deploy
</code></pre>

<p>This will generate your blog, copy the generated files into <code>_deploy/</code>, add them to git, commit and push them up to the master branch, see <a href="http://octopress.org/docs/deploying/github/">Deploying to Github Pages</a>.
Don&rsquo;t forget to commit the source for your blog.</p>

<pre><code>$ git add .
$ git commit -am "Some comment here." 
$ git push origin source  # update the remote source branch 
</code></pre>

<h3>4.2 Pull changes at another computer</h3>

<pre><code>$ cd octopress
$ git pull origin source  # update the local source branch
$ cd ./_deploy
$ git pull origin master  # update the local master branch
</code></pre>

<h2>Reference</h2>

<p><a href="http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/">Clone Your Octopress to Blog From Two Places</a></p>
]]></content>
  </entry>
  
</feed>
